
freertos_app_example_1_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005528  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058c0  080058c0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c8  080058c8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080058d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004308  20000084  08005954  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000438c  08005954  0002438c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129bc  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000308f  00000000  00000000  00032ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00035b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d93  00000000  00000000  00036cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001927a  00000000  00000000  00037a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157b1  00000000  00000000  00050ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009692a  00000000  00000000  00066496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005470  00000000  00000000  000fcdc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00102230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056b0 	.word	0x080056b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080056b0 	.word	0x080056b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000a0 	.word	0x200000a0
 80005bc:	20000100 	.word	0x20000100

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80005c4:	f003 fec0 	bl	8004348 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fb46 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f810 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f8f0 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f8c4 	bl	8000760 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005d8:	f000 f876 	bl	80006c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <main+0x2c>)
 80005de:	f001 fb17 	bl	8001c10 <HAL_TIM_Base_Start_IT>
	
    /* add application, ... */
	app_init();
 80005e2:	f003 fb03 	bl	8003bec <app_init>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e6:	f002 f9c1 	bl	800296c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <main+0x2a>
 80005ec:	20000300 	.word	0x20000300

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 f92b 	bl	800485a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <SystemClock_Config+0xd0>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <SystemClock_Config+0xd0>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <SystemClock_Config+0xd4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <SystemClock_Config+0xd4>)
 800063e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SystemClock_Config+0xd4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000664:	2310      	movs	r3, #16
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000668:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066e:	2304      	movs	r3, #4
 8000670:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000672:	2307      	movs	r3, #7
 8000674:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fdae 	bl	80011dc <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000686:	f000 f939 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2102      	movs	r1, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f810 	bl	80016cc <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006b2:	f000 f923 	bl	80008fc <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_TIM2_Init+0x94>)
 80006e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_TIM2_Init+0x94>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_TIM2_Init+0x94>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42000-1;
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_TIM2_Init+0x94>)
 80006fa:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80006fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_TIM2_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_TIM2_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <MX_TIM2_Init+0x94>)
 800070e:	f001 fa2f 	bl	8001b70 <HAL_TIM_Base_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000718:	f000 f8f0 	bl	80008fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_TIM2_Init+0x94>)
 800072a:	f001 fbc3 	bl	8001eb4 <HAL_TIM_ConfigClockSource>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000734:	f000 f8e2 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_TIM2_Init+0x94>)
 8000746:	f001 fdcb 	bl	80022e0 <HAL_TIMEx_MasterConfigSynchronization>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000750:	f000 f8d4 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000300 	.word	0x20000300

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_USART2_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART2_UART_Init+0x4c>)
 8000798:	f001 fe24 	bl	80023e4 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f8ab 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000348 	.word	0x20000348
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2c      	ldr	r2, [pc, #176]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a25      	ldr	r2, [pc, #148]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <MX_GPIO_Init+0xd0>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2120      	movs	r1, #32
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <MX_GPIO_Init+0xd4>)
 8000840:	f000 fcb2 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_GPIO_Init+0xd8>)
 800085c:	f000 fb20 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000860:	2320      	movs	r3, #32
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_GPIO_Init+0xd4>)
 8000878:	f000 fb12 	bl	8000ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40020000 	.word	0x40020000
 800088c:	40020800 	.word	0x40020800

08000890 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <configureTimerForRunTimeStats+0x14>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	20000390 	.word	0x20000390

080008a8 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <getRunTimeCounterValue+0x14>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000390 	.word	0x20000390

080008c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d2:	f000 f9e3 	bl	8000c9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008de:	d104      	bne.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008e8:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40010000 	.word	0x40010000
 80008f8:	20000390 	.word	0x20000390

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_MspInit+0x54>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <HAL_MspInit+0x54>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x54>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_MspInit+0x54>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_MspInit+0x54>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_MspInit+0x54>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	210f      	movs	r1, #15
 800094a:	f06f 0001 	mvn.w	r0, #1
 800094e:	f000 fa7d 	bl	8000e4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000970:	d115      	bne.n	800099e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	201c      	movs	r0, #28
 8000994:	f000 fa5a 	bl	8000e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000998:	201c      	movs	r0, #28
 800099a:	f000 fa73 	bl	8000e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <HAL_UART_MspInit+0x84>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d12b      	bne.n	8000a26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_UART_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a06:	230c      	movs	r3, #12
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a16:	2307      	movs	r3, #7
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <HAL_UART_MspInit+0x8c>)
 8000a22:	f000 fa3d 	bl	8000ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40004400 	.word	0x40004400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000

08000a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <HAL_InitTick+0xd0>)
 8000a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a54:	4a2d      	ldr	r2, [pc, #180]	; (8000b0c <HAL_InitTick+0xd0>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <HAL_InitTick+0xd0>)
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a68:	f107 020c 	add.w	r2, r7, #12
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f84a 	bl	8001b0c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a78:	f001 f834 	bl	8001ae4 <HAL_RCC_GetPCLK2Freq>
 8000a7c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a80:	4a23      	ldr	r2, [pc, #140]	; (8000b10 <HAL_InitTick+0xd4>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	0c9b      	lsrs	r3, r3, #18
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <HAL_InitTick+0xd8>)
 8000a8e:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <HAL_InitTick+0xdc>)
 8000a90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <HAL_InitTick+0xd8>)
 8000a94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a9a:	4a1e      	ldr	r2, [pc, #120]	; (8000b14 <HAL_InitTick+0xd8>)
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <HAL_InitTick+0xd8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <HAL_InitTick+0xd8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_InitTick+0xd8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ab2:	4818      	ldr	r0, [pc, #96]	; (8000b14 <HAL_InitTick+0xd8>)
 8000ab4:	f001 f85c 	bl	8001b70 <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000abe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d11b      	bne.n	8000afe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ac6:	4813      	ldr	r0, [pc, #76]	; (8000b14 <HAL_InitTick+0xd8>)
 8000ac8:	f001 f8a2 	bl	8001c10 <HAL_TIM_Base_Start_IT>
 8000acc:	4603      	mov	r3, r0
 8000ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d111      	bne.n	8000afe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ada:	2019      	movs	r0, #25
 8000adc:	f000 f9d2 	bl	8000e84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	d808      	bhi.n	8000af8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	2019      	movs	r0, #25
 8000aec:	f000 f9ae 	bl	8000e4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_InitTick+0xe0>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e002      	b.n	8000afe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000afe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3730      	adds	r7, #48	; 0x30
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	431bde83 	.word	0x431bde83
 8000b14:	20000394 	.word	0x20000394
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	20000004 	.word	0x20000004

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b52:	f001 f8bf 	bl	8001cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000394 	.word	0x20000394

08000b60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <TIM2_IRQHandler+0x10>)
 8000b66:	f001 f8b5 	bl	8001cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000300 	.word	0x20000300

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f003 fea8 	bl	80048f8 <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20018000 	.word	0x20018000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	200003dc 	.word	0x200003dc
 8000bdc:	20004390 	.word	0x20004390

08000be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c08:	f7ff ffea 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	; (8000c50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f003 fe67 	bl	8004904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fcc3 	bl	80005c0 <main>
  bx  lr    
 8000c3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000c48:	080058d0 	.word	0x080058d0
  ldr r2, =_sbss
 8000c4c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000c50:	2000438c 	.word	0x2000438c

08000c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <HAL_Init+0x40>)
 8000c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_Init+0x40>)
 8000c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_Init+0x40>)
 8000c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f8d8 	bl	8000e36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	200f      	movs	r0, #15
 8000c88:	f7ff fed8 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f7ff fe3c 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023c00 	.word	0x40023c00

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	200003e0 	.word	0x200003e0

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	200003e0 	.word	0x200003e0

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	db0b      	blt.n	8000d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	f003 021f 	and.w	r2, r3, #31
 8000d58:	4907      	ldr	r1, [pc, #28]	; (8000d78 <__NVIC_EnableIRQ+0x38>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	095b      	lsrs	r3, r3, #5
 8000d60:	2001      	movs	r0, #1
 8000d62:	fa00 f202 	lsl.w	r2, r0, r2
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ff4c 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5e:	f7ff ff61 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000e62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	68b9      	ldr	r1, [r7, #8]
 8000e68:	6978      	ldr	r0, [r7, #20]
 8000e6a:	f7ff ffb1 	bl	8000dd0 <NVIC_EncodePriority>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff80 	bl	8000d7c <__NVIC_SetPriority>
}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff54 	bl	8000d40 <__NVIC_EnableIRQ>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
 8000eba:	e159      	b.n	8001170 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	f040 8148 	bne.w	800116a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d005      	beq.n	8000ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d130      	bne.n	8000f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	f003 0201 	and.w	r2, r3, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d017      	beq.n	8000f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d123      	bne.n	8000fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	08da      	lsrs	r2, r3, #3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3208      	adds	r2, #8
 8000fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	691a      	ldr	r2, [r3, #16]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	08da      	lsrs	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3208      	adds	r2, #8
 8000fde:	69b9      	ldr	r1, [r7, #24]
 8000fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0203 	and.w	r2, r3, #3
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 80a2 	beq.w	800116a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b57      	ldr	r3, [pc, #348]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a56      	ldr	r2, [pc, #344]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b54      	ldr	r3, [pc, #336]	; (8001188 <HAL_GPIO_Init+0x2e8>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001042:	4a52      	ldr	r2, [pc, #328]	; (800118c <HAL_GPIO_Init+0x2ec>)
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	220f      	movs	r2, #15
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a49      	ldr	r2, [pc, #292]	; (8001190 <HAL_GPIO_Init+0x2f0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d019      	beq.n	80010a2 <HAL_GPIO_Init+0x202>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a48      	ldr	r2, [pc, #288]	; (8001194 <HAL_GPIO_Init+0x2f4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0x1fe>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a47      	ldr	r2, [pc, #284]	; (8001198 <HAL_GPIO_Init+0x2f8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00d      	beq.n	800109a <HAL_GPIO_Init+0x1fa>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a46      	ldr	r2, [pc, #280]	; (800119c <HAL_GPIO_Init+0x2fc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x1f6>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a45      	ldr	r2, [pc, #276]	; (80011a0 <HAL_GPIO_Init+0x300>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_GPIO_Init+0x1f2>
 800108e:	2304      	movs	r3, #4
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 8001092:	2307      	movs	r3, #7
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x204>
 80010a2:	2300      	movs	r3, #0
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b4:	4935      	ldr	r1, [pc, #212]	; (800118c <HAL_GPIO_Init+0x2ec>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <HAL_GPIO_Init+0x304>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e6:	4a2f      	ldr	r2, [pc, #188]	; (80011a4 <HAL_GPIO_Init+0x304>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <HAL_GPIO_Init+0x304>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113a:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <HAL_GPIO_Init+0x304>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001164:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_GPIO_Init+0x304>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	f67f aea2 	bls.w	8000ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40013800 	.word	0x40013800
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40013c00 	.word	0x40013c00

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c4:	e003      	b.n	80011ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	041a      	lsls	r2, r3, #16
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e267      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d075      	beq.n	80012e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011fa:	4b88      	ldr	r3, [pc, #544]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d00c      	beq.n	8001220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b85      	ldr	r3, [pc, #532]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120e:	2b08      	cmp	r3, #8
 8001210:	d112      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001212:	4b82      	ldr	r3, [pc, #520]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800121e:	d10b      	bne.n	8001238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	4b7e      	ldr	r3, [pc, #504]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d05b      	beq.n	80012e4 <HAL_RCC_OscConfig+0x108>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d157      	bne.n	80012e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e242      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001240:	d106      	bne.n	8001250 <HAL_RCC_OscConfig+0x74>
 8001242:	4b76      	ldr	r3, [pc, #472]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a75      	ldr	r2, [pc, #468]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e01d      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0x98>
 800125a:	4b70      	ldr	r3, [pc, #448]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6f      	ldr	r2, [pc, #444]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b6d      	ldr	r3, [pc, #436]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a6c      	ldr	r2, [pc, #432]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e00b      	b.n	800128c <HAL_RCC_OscConfig+0xb0>
 8001274:	4b69      	ldr	r3, [pc, #420]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a68      	ldr	r2, [pc, #416]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800127a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b66      	ldr	r3, [pc, #408]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a65      	ldr	r2, [pc, #404]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fd16 	bl	8000cc4 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129c:	f7ff fd12 	bl	8000cc4 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b64      	cmp	r3, #100	; 0x64
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e207      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	4b5b      	ldr	r3, [pc, #364]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0xc0>
 80012ba:	e014      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fd02 	bl	8000cc4 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fcfe 	bl	8000cc4 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e1f3      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	4b51      	ldr	r3, [pc, #324]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0xe8>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d063      	beq.n	80013ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012f2:	4b4a      	ldr	r3, [pc, #296]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00b      	beq.n	8001316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b47      	ldr	r3, [pc, #284]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001306:	2b08      	cmp	r3, #8
 8001308:	d11c      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130a:	4b44      	ldr	r3, [pc, #272]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d116      	bne.n	8001344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001316:	4b41      	ldr	r3, [pc, #260]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d001      	beq.n	800132e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e1c7      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4937      	ldr	r1, [pc, #220]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001342:	e03a      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d020      	beq.n	800138e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134c:	4b34      	ldr	r3, [pc, #208]	; (8001420 <HAL_RCC_OscConfig+0x244>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001352:	f7ff fcb7 	bl	8000cc4 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135a:	f7ff fcb3 	bl	8000cc4 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e1a8      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <HAL_RCC_OscConfig+0x240>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4925      	ldr	r1, [pc, #148]	; (800141c <HAL_RCC_OscConfig+0x240>)
 8001388:	4313      	orrs	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
 800138c:	e015      	b.n	80013ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_RCC_OscConfig+0x244>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fc96 	bl	8000cc4 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139c:	f7ff fc92 	bl	8000cc4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e187      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d036      	beq.n	8001434 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d016      	beq.n	80013fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_RCC_OscConfig+0x248>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff fc76 	bl	8000cc4 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff fc72 	bl	8000cc4 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e167      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_RCC_OscConfig+0x240>)
 80013f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x200>
 80013fa:	e01b      	b.n	8001434 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_RCC_OscConfig+0x248>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001402:	f7ff fc5f 	bl	8000cc4 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001408:	e00e      	b.n	8001428 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff fc5b 	bl	8000cc4 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d907      	bls.n	8001428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e150      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
 800141c:	40023800 	.word	0x40023800
 8001420:	42470000 	.word	0x42470000
 8001424:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001428:	4b88      	ldr	r3, [pc, #544]	; (800164c <HAL_RCC_OscConfig+0x470>)
 800142a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1ea      	bne.n	800140a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 8097 	beq.w	8001570 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001446:	4b81      	ldr	r3, [pc, #516]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10f      	bne.n	8001472 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b7d      	ldr	r3, [pc, #500]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a7c      	ldr	r2, [pc, #496]	; (800164c <HAL_RCC_OscConfig+0x470>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b7a      	ldr	r3, [pc, #488]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146e:	2301      	movs	r3, #1
 8001470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001472:	4b77      	ldr	r3, [pc, #476]	; (8001650 <HAL_RCC_OscConfig+0x474>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	2b00      	cmp	r3, #0
 800147c:	d118      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147e:	4b74      	ldr	r3, [pc, #464]	; (8001650 <HAL_RCC_OscConfig+0x474>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a73      	ldr	r2, [pc, #460]	; (8001650 <HAL_RCC_OscConfig+0x474>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148a:	f7ff fc1b 	bl	8000cc4 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001492:	f7ff fc17 	bl	8000cc4 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e10c      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	4b6a      	ldr	r3, [pc, #424]	; (8001650 <HAL_RCC_OscConfig+0x474>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x2ea>
 80014b8:	4b64      	ldr	r3, [pc, #400]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014bc:	4a63      	ldr	r2, [pc, #396]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6713      	str	r3, [r2, #112]	; 0x70
 80014c4:	e01c      	b.n	8001500 <HAL_RCC_OscConfig+0x324>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x30c>
 80014ce:	4b5f      	ldr	r3, [pc, #380]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a5e      	ldr	r2, [pc, #376]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
 80014da:	4b5c      	ldr	r3, [pc, #368]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014de:	4a5b      	ldr	r2, [pc, #364]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6713      	str	r3, [r2, #112]	; 0x70
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x324>
 80014e8:	4b58      	ldr	r3, [pc, #352]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a57      	ldr	r2, [pc, #348]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
 80014f4:	4b55      	ldr	r3, [pc, #340]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	4a54      	ldr	r2, [pc, #336]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80014fa:	f023 0304 	bic.w	r3, r3, #4
 80014fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d015      	beq.n	8001534 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001508:	f7ff fbdc 	bl	8000cc4 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150e:	e00a      	b.n	8001526 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001510:	f7ff fbd8 	bl	8000cc4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	; 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e0cb      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001526:	4b49      	ldr	r3, [pc, #292]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0ee      	beq.n	8001510 <HAL_RCC_OscConfig+0x334>
 8001532:	e014      	b.n	800155e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff fbc6 	bl	8000cc4 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153a:	e00a      	b.n	8001552 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fbc2 	bl	8000cc4 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	; 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e0b5      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001552:	4b3e      	ldr	r3, [pc, #248]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ee      	bne.n	800153c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a38      	ldr	r2, [pc, #224]	; (800164c <HAL_RCC_OscConfig+0x470>)
 800156a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80a1 	beq.w	80016bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800157a:	4b34      	ldr	r3, [pc, #208]	; (800164c <HAL_RCC_OscConfig+0x470>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b08      	cmp	r3, #8
 8001584:	d05c      	beq.n	8001640 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d141      	bne.n	8001612 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b31      	ldr	r3, [pc, #196]	; (8001654 <HAL_RCC_OscConfig+0x478>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fb96 	bl	8000cc4 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff fb92 	bl	8000cc4 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e087      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	019b      	lsls	r3, r3, #6
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	3b01      	subs	r3, #1
 80015d4:	041b      	lsls	r3, r3, #16
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	061b      	lsls	r3, r3, #24
 80015de:	491b      	ldr	r1, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x470>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_RCC_OscConfig+0x478>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fb6b 	bl	8000cc4 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff fb67 	bl	8000cc4 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e05c      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x416>
 8001610:	e054      	b.n	80016bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_RCC_OscConfig+0x478>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fb54 	bl	8000cc4 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fb50 	bl	8000cc4 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e045      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_RCC_OscConfig+0x470>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x444>
 800163e:	e03d      	b.n	80016bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d107      	bne.n	8001658 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e038      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000
 8001654:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x4ec>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d028      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d121      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	429a      	cmp	r2, r3
 8001680:	d11a      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001688:	4013      	ands	r3, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800168e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001690:	4293      	cmp	r3, r2
 8001692:	d111      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	3b01      	subs	r3, #1
 80016a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0cc      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e0:	4b68      	ldr	r3, [pc, #416]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d90c      	bls.n	8001708 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b65      	ldr	r3, [pc, #404]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0b8      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001720:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a58      	ldr	r2, [pc, #352]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800172a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001742:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001744:	4b50      	ldr	r3, [pc, #320]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	494d      	ldr	r1, [pc, #308]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d044      	beq.n	80017ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d119      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e07f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d003      	beq.n	800178a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001786:	2b03      	cmp	r3, #3
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178a:	4b3f      	ldr	r3, [pc, #252]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e06f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	4b3b      	ldr	r3, [pc, #236]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e067      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017aa:	4b37      	ldr	r3, [pc, #220]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f023 0203 	bic.w	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4934      	ldr	r1, [pc, #208]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017bc:	f7ff fa82 	bl	8000cc4 <HAL_GetTick>
 80017c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	e00a      	b.n	80017da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c4:	f7ff fa7e 	bl	8000cc4 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e04f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	4b2b      	ldr	r3, [pc, #172]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 020c 	and.w	r2, r3, #12
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d1eb      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d20c      	bcs.n	8001814 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e032      	b.n	800187a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4916      	ldr	r1, [pc, #88]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	490e      	ldr	r1, [pc, #56]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001852:	f000 f821 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8001856:	4602      	mov	r2, r0
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	490a      	ldr	r1, [pc, #40]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	5ccb      	ldrb	r3, [r1, r3]
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f8e2 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00
 8001888:	40023800 	.word	0x40023800
 800188c:	08005854 	.word	0x08005854
 8001890:	20000000 	.word	0x20000000
 8001894:	20000004 	.word	0x20000004

08001898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800189c:	b094      	sub	sp, #80	; 0x50
 800189e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	647b      	str	r3, [r7, #68]	; 0x44
 80018a4:	2300      	movs	r3, #0
 80018a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018a8:	2300      	movs	r3, #0
 80018aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b0:	4b79      	ldr	r3, [pc, #484]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d00d      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x40>
 80018bc:	2b08      	cmp	r3, #8
 80018be:	f200 80e1 	bhi.w	8001a84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x34>
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d003      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ca:	e0db      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018cc:	4b73      	ldr	r3, [pc, #460]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x204>)
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018d0:	e0db      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018d2:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x208>)
 80018d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018d6:	e0d8      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d8:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e2:	4b6d      	ldr	r3, [pc, #436]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d063      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ee:	4b6a      	ldr	r3, [pc, #424]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	099b      	lsrs	r3, r3, #6
 80018f4:	2200      	movs	r2, #0
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80018f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
 8001902:	2300      	movs	r3, #0
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
 8001906:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800190a:	4622      	mov	r2, r4
 800190c:	462b      	mov	r3, r5
 800190e:	f04f 0000 	mov.w	r0, #0
 8001912:	f04f 0100 	mov.w	r1, #0
 8001916:	0159      	lsls	r1, r3, #5
 8001918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191c:	0150      	lsls	r0, r2, #5
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4621      	mov	r1, r4
 8001924:	1a51      	subs	r1, r2, r1
 8001926:	6139      	str	r1, [r7, #16]
 8001928:	4629      	mov	r1, r5
 800192a:	eb63 0301 	sbc.w	r3, r3, r1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800193c:	4659      	mov	r1, fp
 800193e:	018b      	lsls	r3, r1, #6
 8001940:	4651      	mov	r1, sl
 8001942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001946:	4651      	mov	r1, sl
 8001948:	018a      	lsls	r2, r1, #6
 800194a:	4651      	mov	r1, sl
 800194c:	ebb2 0801 	subs.w	r8, r2, r1
 8001950:	4659      	mov	r1, fp
 8001952:	eb63 0901 	sbc.w	r9, r3, r1
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800196a:	4690      	mov	r8, r2
 800196c:	4699      	mov	r9, r3
 800196e:	4623      	mov	r3, r4
 8001970:	eb18 0303 	adds.w	r3, r8, r3
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	462b      	mov	r3, r5
 8001978:	eb49 0303 	adc.w	r3, r9, r3
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800198a:	4629      	mov	r1, r5
 800198c:	024b      	lsls	r3, r1, #9
 800198e:	4621      	mov	r1, r4
 8001990:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001994:	4621      	mov	r1, r4
 8001996:	024a      	lsls	r2, r1, #9
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199e:	2200      	movs	r2, #0
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019a8:	f7fe fc72 	bl	8000290 <__aeabi_uldivmod>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4613      	mov	r3, r2
 80019b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019b4:	e058      	b.n	8001a68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b6:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	099b      	lsrs	r3, r3, #6
 80019bc:	2200      	movs	r2, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	4611      	mov	r1, r2
 80019c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019c6:	623b      	str	r3, [r7, #32]
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
 80019cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019d0:	4642      	mov	r2, r8
 80019d2:	464b      	mov	r3, r9
 80019d4:	f04f 0000 	mov.w	r0, #0
 80019d8:	f04f 0100 	mov.w	r1, #0
 80019dc:	0159      	lsls	r1, r3, #5
 80019de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e2:	0150      	lsls	r0, r2, #5
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4641      	mov	r1, r8
 80019ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ee:	4649      	mov	r1, r9
 80019f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a08:	ebb2 040a 	subs.w	r4, r2, sl
 8001a0c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	00eb      	lsls	r3, r5, #3
 8001a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a1e:	00e2      	lsls	r2, r4, #3
 8001a20:	4614      	mov	r4, r2
 8001a22:	461d      	mov	r5, r3
 8001a24:	4643      	mov	r3, r8
 8001a26:	18e3      	adds	r3, r4, r3
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	464b      	mov	r3, r9
 8001a2c:	eb45 0303 	adc.w	r3, r5, r3
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a3e:	4629      	mov	r1, r5
 8001a40:	028b      	lsls	r3, r1, #10
 8001a42:	4621      	mov	r1, r4
 8001a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a48:	4621      	mov	r1, r4
 8001a4a:	028a      	lsls	r2, r1, #10
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a52:	2200      	movs	r2, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	61fa      	str	r2, [r7, #28]
 8001a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a5c:	f7fe fc18 	bl	8000290 <__aeabi_uldivmod>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4613      	mov	r3, r2
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	0c1b      	lsrs	r3, r3, #16
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	3301      	adds	r3, #1
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a82:	e002      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3750      	adds	r7, #80	; 0x50
 8001a90:	46bd      	mov	sp, r7
 8001a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	00f42400 	.word	0x00f42400
 8001aa0:	007a1200 	.word	0x007a1200

08001aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000000 	.word	0x20000000

08001abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ac0:	f7ff fff0 	bl	8001aa4 <HAL_RCC_GetHCLKFreq>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	0a9b      	lsrs	r3, r3, #10
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	4903      	ldr	r1, [pc, #12]	; (8001ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ad2:	5ccb      	ldrb	r3, [r1, r3]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	08005864 	.word	0x08005864

08001ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ae8:	f7ff ffdc 	bl	8001aa4 <HAL_RCC_GetHCLKFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	0b5b      	lsrs	r3, r3, #13
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	4903      	ldr	r1, [pc, #12]	; (8001b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40023800 	.word	0x40023800
 8001b08:	08005864 	.word	0x08005864

08001b0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	220f      	movs	r2, #15
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_GetClockConfig+0x5c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <HAL_RCC_GetClockConfig+0x60>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0207 	and.w	r2, r3, #7
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	601a      	str	r2, [r3, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40023c00 	.word	0x40023c00

08001b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e041      	b.n	8001c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7fe fee2 	bl	8000960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3304      	adds	r3, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4610      	mov	r0, r2
 8001bb0:	f000 fa70 	bl	8002094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d001      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e044      	b.n	8001cb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1e      	ldr	r2, [pc, #120]	; (8001cc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d018      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x6c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c52:	d013      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x6c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00e      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x6c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a19      	ldr	r2, [pc, #100]	; (8001cc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d009      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x6c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <HAL_TIM_Base_Start_IT+0xbc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d004      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x6c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a16      	ldr	r2, [pc, #88]	; (8001cd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d111      	bne.n	8001ca0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d010      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9e:	e007      	b.n	8001cb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40000400 	.word	0x40000400
 8001cc8:	40000800 	.word	0x40000800
 8001ccc:	40000c00 	.word	0x40000c00
 8001cd0:	40014000 	.word	0x40014000

08001cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d020      	beq.n	8001d38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01b      	beq.n	8001d38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0202 	mvn.w	r2, #2
 8001d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f999 	bl	8002056 <HAL_TIM_IC_CaptureCallback>
 8001d24:	e005      	b.n	8001d32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f98b 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f99c 	bl	800206a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d020      	beq.n	8001d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01b      	beq.n	8001d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0204 	mvn.w	r2, #4
 8001d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f973 	bl	8002056 <HAL_TIM_IC_CaptureCallback>
 8001d70:	e005      	b.n	8001d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f965 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f976 	bl	800206a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d020      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01b      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0208 	mvn.w	r2, #8
 8001da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2204      	movs	r2, #4
 8001da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f94d 	bl	8002056 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f93f 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f950 	bl	800206a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d020      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0210 	mvn.w	r2, #16
 8001dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2208      	movs	r2, #8
 8001df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f927 	bl	8002056 <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f919 	bl	8002042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f92a 	bl	800206a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00c      	beq.n	8001e40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0201 	mvn.w	r2, #1
 8001e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe fd40 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00c      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fab6 	bl	80023d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00c      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8fb 	bl	800207e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0220 	mvn.w	r2, #32
 8001ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fa88 	bl	80023bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_TIM_ConfigClockSource+0x1c>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e0b4      	b.n	800203a <HAL_TIM_ConfigClockSource+0x186>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f08:	d03e      	beq.n	8001f88 <HAL_TIM_ConfigClockSource+0xd4>
 8001f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f0e:	f200 8087 	bhi.w	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f16:	f000 8086 	beq.w	8002026 <HAL_TIM_ConfigClockSource+0x172>
 8001f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1e:	d87f      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f20:	2b70      	cmp	r3, #112	; 0x70
 8001f22:	d01a      	beq.n	8001f5a <HAL_TIM_ConfigClockSource+0xa6>
 8001f24:	2b70      	cmp	r3, #112	; 0x70
 8001f26:	d87b      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f28:	2b60      	cmp	r3, #96	; 0x60
 8001f2a:	d050      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0x11a>
 8001f2c:	2b60      	cmp	r3, #96	; 0x60
 8001f2e:	d877      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f30:	2b50      	cmp	r3, #80	; 0x50
 8001f32:	d03c      	beq.n	8001fae <HAL_TIM_ConfigClockSource+0xfa>
 8001f34:	2b50      	cmp	r3, #80	; 0x50
 8001f36:	d873      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f38:	2b40      	cmp	r3, #64	; 0x40
 8001f3a:	d058      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0x13a>
 8001f3c:	2b40      	cmp	r3, #64	; 0x40
 8001f3e:	d86f      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f40:	2b30      	cmp	r3, #48	; 0x30
 8001f42:	d064      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x15a>
 8001f44:	2b30      	cmp	r3, #48	; 0x30
 8001f46:	d86b      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d060      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x15a>
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	d867      	bhi.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d05c      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x15a>
 8001f54:	2b10      	cmp	r3, #16
 8001f56:	d05a      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x15a>
 8001f58:	e062      	b.n	8002020 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f6a:	f000 f999 	bl	80022a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	609a      	str	r2, [r3, #8]
      break;
 8001f86:	e04f      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f98:	f000 f982 	bl	80022a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001faa:	609a      	str	r2, [r3, #8]
      break;
 8001fac:	e03c      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f000 f8f6 	bl	80021ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2150      	movs	r1, #80	; 0x50
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f94f 	bl	800226a <TIM_ITRx_SetConfig>
      break;
 8001fcc:	e02c      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f000 f915 	bl	800220a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2160      	movs	r1, #96	; 0x60
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f93f 	bl	800226a <TIM_ITRx_SetConfig>
      break;
 8001fec:	e01c      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f000 f8d6 	bl	80021ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2140      	movs	r1, #64	; 0x40
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f92f 	bl	800226a <TIM_ITRx_SetConfig>
      break;
 800200c:	e00c      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	4610      	mov	r0, r2
 800201a:	f000 f926 	bl	800226a <TIM_ITRx_SetConfig>
      break;
 800201e:	e003      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
      break;
 8002024:	e000      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a3a      	ldr	r2, [pc, #232]	; (8002190 <TIM_Base_SetConfig+0xfc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00f      	beq.n	80020cc <TIM_Base_SetConfig+0x38>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b2:	d00b      	beq.n	80020cc <TIM_Base_SetConfig+0x38>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a37      	ldr	r2, [pc, #220]	; (8002194 <TIM_Base_SetConfig+0x100>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d007      	beq.n	80020cc <TIM_Base_SetConfig+0x38>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a36      	ldr	r2, [pc, #216]	; (8002198 <TIM_Base_SetConfig+0x104>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d003      	beq.n	80020cc <TIM_Base_SetConfig+0x38>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a35      	ldr	r2, [pc, #212]	; (800219c <TIM_Base_SetConfig+0x108>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d108      	bne.n	80020de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a2b      	ldr	r2, [pc, #172]	; (8002190 <TIM_Base_SetConfig+0xfc>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d01b      	beq.n	800211e <TIM_Base_SetConfig+0x8a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ec:	d017      	beq.n	800211e <TIM_Base_SetConfig+0x8a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a28      	ldr	r2, [pc, #160]	; (8002194 <TIM_Base_SetConfig+0x100>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d013      	beq.n	800211e <TIM_Base_SetConfig+0x8a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a27      	ldr	r2, [pc, #156]	; (8002198 <TIM_Base_SetConfig+0x104>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00f      	beq.n	800211e <TIM_Base_SetConfig+0x8a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a26      	ldr	r2, [pc, #152]	; (800219c <TIM_Base_SetConfig+0x108>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00b      	beq.n	800211e <TIM_Base_SetConfig+0x8a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a25      	ldr	r2, [pc, #148]	; (80021a0 <TIM_Base_SetConfig+0x10c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d007      	beq.n	800211e <TIM_Base_SetConfig+0x8a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a24      	ldr	r2, [pc, #144]	; (80021a4 <TIM_Base_SetConfig+0x110>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d003      	beq.n	800211e <TIM_Base_SetConfig+0x8a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a23      	ldr	r2, [pc, #140]	; (80021a8 <TIM_Base_SetConfig+0x114>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d108      	bne.n	8002130 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <TIM_Base_SetConfig+0xfc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d103      	bne.n	8002164 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b01      	cmp	r3, #1
 8002174:	d105      	bne.n	8002182 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f023 0201 	bic.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]
  }
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40010000 	.word	0x40010000
 8002194:	40000400 	.word	0x40000400
 8002198:	40000800 	.word	0x40000800
 800219c:	40000c00 	.word	0x40000c00
 80021a0:	40014000 	.word	0x40014000
 80021a4:	40014400 	.word	0x40014400
 80021a8:	40014800 	.word	0x40014800

080021ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	f023 0201 	bic.w	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f023 030a 	bic.w	r3, r3, #10
 80021e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	621a      	str	r2, [r3, #32]
}
 80021fe:	bf00      	nop
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800220a:	b480      	push	{r7}
 800220c:	b087      	sub	sp, #28
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f023 0210 	bic.w	r2, r3, #16
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	031b      	lsls	r3, r3, #12
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002246:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	4313      	orrs	r3, r2
 8002250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	621a      	str	r2, [r3, #32]
}
 800225e:	bf00      	nop
 8002260:	371c      	adds	r7, #28
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	f043 0307 	orr.w	r3, r3, #7
 800228c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	609a      	str	r2, [r3, #8]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	021a      	lsls	r2, r3, #8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	609a      	str	r2, [r3, #8]
}
 80022d4:	bf00      	nop
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e050      	b.n	800239a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d018      	beq.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002344:	d013      	beq.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00e      	beq.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d009      	beq.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d004      	beq.n	800236e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a13      	ldr	r2, [pc, #76]	; (80023b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d10c      	bne.n	8002388 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	4313      	orrs	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40000400 	.word	0x40000400
 80023b0:	40000800 	.word	0x40000800
 80023b4:	40000c00 	.word	0x40000c00
 80023b8:	40014000 	.word	0x40014000

080023bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e042      	b.n	800247c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe face 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2224      	movs	r2, #36	; 0x24
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f82b 	bl	8002484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800243c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800244c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800245c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002488:	b0c0      	sub	sp, #256	; 0x100
 800248a:	af00      	add	r7, sp, #0
 800248c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800249c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a0:	68d9      	ldr	r1, [r3, #12]
 80024a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	ea40 0301 	orr.w	r3, r0, r1
 80024ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024dc:	f021 010c 	bic.w	r1, r1, #12
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80024ea:	430b      	orrs	r3, r1
 80024ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fe:	6999      	ldr	r1, [r3, #24]
 8002500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	ea40 0301 	orr.w	r3, r0, r1
 800250a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b8f      	ldr	r3, [pc, #572]	; (8002750 <UART_SetConfig+0x2cc>)
 8002514:	429a      	cmp	r2, r3
 8002516:	d005      	beq.n	8002524 <UART_SetConfig+0xa0>
 8002518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4b8d      	ldr	r3, [pc, #564]	; (8002754 <UART_SetConfig+0x2d0>)
 8002520:	429a      	cmp	r2, r3
 8002522:	d104      	bne.n	800252e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002524:	f7ff fade 	bl	8001ae4 <HAL_RCC_GetPCLK2Freq>
 8002528:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800252c:	e003      	b.n	8002536 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800252e:	f7ff fac5 	bl	8001abc <HAL_RCC_GetPCLK1Freq>
 8002532:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002540:	f040 810c 	bne.w	800275c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002548:	2200      	movs	r2, #0
 800254a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800254e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002552:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002556:	4622      	mov	r2, r4
 8002558:	462b      	mov	r3, r5
 800255a:	1891      	adds	r1, r2, r2
 800255c:	65b9      	str	r1, [r7, #88]	; 0x58
 800255e:	415b      	adcs	r3, r3
 8002560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002562:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002566:	4621      	mov	r1, r4
 8002568:	eb12 0801 	adds.w	r8, r2, r1
 800256c:	4629      	mov	r1, r5
 800256e:	eb43 0901 	adc.w	r9, r3, r1
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800257e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002586:	4690      	mov	r8, r2
 8002588:	4699      	mov	r9, r3
 800258a:	4623      	mov	r3, r4
 800258c:	eb18 0303 	adds.w	r3, r8, r3
 8002590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002594:	462b      	mov	r3, r5
 8002596:	eb49 0303 	adc.w	r3, r9, r3
 800259a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800259e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80025aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80025ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80025b2:	460b      	mov	r3, r1
 80025b4:	18db      	adds	r3, r3, r3
 80025b6:	653b      	str	r3, [r7, #80]	; 0x50
 80025b8:	4613      	mov	r3, r2
 80025ba:	eb42 0303 	adc.w	r3, r2, r3
 80025be:	657b      	str	r3, [r7, #84]	; 0x54
 80025c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80025c8:	f7fd fe62 	bl	8000290 <__aeabi_uldivmod>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4b61      	ldr	r3, [pc, #388]	; (8002758 <UART_SetConfig+0x2d4>)
 80025d2:	fba3 2302 	umull	r2, r3, r3, r2
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	011c      	lsls	r4, r3, #4
 80025da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025de:	2200      	movs	r2, #0
 80025e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80025e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80025ec:	4642      	mov	r2, r8
 80025ee:	464b      	mov	r3, r9
 80025f0:	1891      	adds	r1, r2, r2
 80025f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80025f4:	415b      	adcs	r3, r3
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025fc:	4641      	mov	r1, r8
 80025fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002602:	4649      	mov	r1, r9
 8002604:	eb43 0b01 	adc.w	fp, r3, r1
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002614:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800261c:	4692      	mov	sl, r2
 800261e:	469b      	mov	fp, r3
 8002620:	4643      	mov	r3, r8
 8002622:	eb1a 0303 	adds.w	r3, sl, r3
 8002626:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800262a:	464b      	mov	r3, r9
 800262c:	eb4b 0303 	adc.w	r3, fp, r3
 8002630:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002640:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002644:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002648:	460b      	mov	r3, r1
 800264a:	18db      	adds	r3, r3, r3
 800264c:	643b      	str	r3, [r7, #64]	; 0x40
 800264e:	4613      	mov	r3, r2
 8002650:	eb42 0303 	adc.w	r3, r2, r3
 8002654:	647b      	str	r3, [r7, #68]	; 0x44
 8002656:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800265a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800265e:	f7fd fe17 	bl	8000290 <__aeabi_uldivmod>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4611      	mov	r1, r2
 8002668:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <UART_SetConfig+0x2d4>)
 800266a:	fba3 2301 	umull	r2, r3, r3, r1
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2264      	movs	r2, #100	; 0x64
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	1acb      	subs	r3, r1, r3
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800267e:	4b36      	ldr	r3, [pc, #216]	; (8002758 <UART_SetConfig+0x2d4>)
 8002680:	fba3 2302 	umull	r2, r3, r3, r2
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800268c:	441c      	add	r4, r3
 800268e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002692:	2200      	movs	r2, #0
 8002694:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002698:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800269c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80026a0:	4642      	mov	r2, r8
 80026a2:	464b      	mov	r3, r9
 80026a4:	1891      	adds	r1, r2, r2
 80026a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80026a8:	415b      	adcs	r3, r3
 80026aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80026b0:	4641      	mov	r1, r8
 80026b2:	1851      	adds	r1, r2, r1
 80026b4:	6339      	str	r1, [r7, #48]	; 0x30
 80026b6:	4649      	mov	r1, r9
 80026b8:	414b      	adcs	r3, r1
 80026ba:	637b      	str	r3, [r7, #52]	; 0x34
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80026c8:	4659      	mov	r1, fp
 80026ca:	00cb      	lsls	r3, r1, #3
 80026cc:	4651      	mov	r1, sl
 80026ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026d2:	4651      	mov	r1, sl
 80026d4:	00ca      	lsls	r2, r1, #3
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	4603      	mov	r3, r0
 80026dc:	4642      	mov	r2, r8
 80026de:	189b      	adds	r3, r3, r2
 80026e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026e4:	464b      	mov	r3, r9
 80026e6:	460a      	mov	r2, r1
 80026e8:	eb42 0303 	adc.w	r3, r2, r3
 80026ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80026fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002704:	460b      	mov	r3, r1
 8002706:	18db      	adds	r3, r3, r3
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
 800270a:	4613      	mov	r3, r2
 800270c:	eb42 0303 	adc.w	r3, r2, r3
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002712:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002716:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800271a:	f7fd fdb9 	bl	8000290 <__aeabi_uldivmod>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <UART_SetConfig+0x2d4>)
 8002724:	fba3 1302 	umull	r1, r3, r3, r2
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	2164      	movs	r1, #100	; 0x64
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	3332      	adds	r3, #50	; 0x32
 8002736:	4a08      	ldr	r2, [pc, #32]	; (8002758 <UART_SetConfig+0x2d4>)
 8002738:	fba2 2303 	umull	r2, r3, r2, r3
 800273c:	095b      	lsrs	r3, r3, #5
 800273e:	f003 0207 	and.w	r2, r3, #7
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4422      	add	r2, r4
 800274a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800274c:	e106      	b.n	800295c <UART_SetConfig+0x4d8>
 800274e:	bf00      	nop
 8002750:	40011000 	.word	0x40011000
 8002754:	40011400 	.word	0x40011400
 8002758:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800275c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002760:	2200      	movs	r2, #0
 8002762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002766:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800276a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800276e:	4642      	mov	r2, r8
 8002770:	464b      	mov	r3, r9
 8002772:	1891      	adds	r1, r2, r2
 8002774:	6239      	str	r1, [r7, #32]
 8002776:	415b      	adcs	r3, r3
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
 800277a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800277e:	4641      	mov	r1, r8
 8002780:	1854      	adds	r4, r2, r1
 8002782:	4649      	mov	r1, r9
 8002784:	eb43 0501 	adc.w	r5, r3, r1
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	00eb      	lsls	r3, r5, #3
 8002792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002796:	00e2      	lsls	r2, r4, #3
 8002798:	4614      	mov	r4, r2
 800279a:	461d      	mov	r5, r3
 800279c:	4643      	mov	r3, r8
 800279e:	18e3      	adds	r3, r4, r3
 80027a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80027a4:	464b      	mov	r3, r9
 80027a6:	eb45 0303 	adc.w	r3, r5, r3
 80027aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027ca:	4629      	mov	r1, r5
 80027cc:	008b      	lsls	r3, r1, #2
 80027ce:	4621      	mov	r1, r4
 80027d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027d4:	4621      	mov	r1, r4
 80027d6:	008a      	lsls	r2, r1, #2
 80027d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80027dc:	f7fd fd58 	bl	8000290 <__aeabi_uldivmod>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4b60      	ldr	r3, [pc, #384]	; (8002968 <UART_SetConfig+0x4e4>)
 80027e6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	011c      	lsls	r4, r3, #4
 80027ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027f2:	2200      	movs	r2, #0
 80027f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002800:	4642      	mov	r2, r8
 8002802:	464b      	mov	r3, r9
 8002804:	1891      	adds	r1, r2, r2
 8002806:	61b9      	str	r1, [r7, #24]
 8002808:	415b      	adcs	r3, r3
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002810:	4641      	mov	r1, r8
 8002812:	1851      	adds	r1, r2, r1
 8002814:	6139      	str	r1, [r7, #16]
 8002816:	4649      	mov	r1, r9
 8002818:	414b      	adcs	r3, r1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002828:	4659      	mov	r1, fp
 800282a:	00cb      	lsls	r3, r1, #3
 800282c:	4651      	mov	r1, sl
 800282e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002832:	4651      	mov	r1, sl
 8002834:	00ca      	lsls	r2, r1, #3
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	4603      	mov	r3, r0
 800283c:	4642      	mov	r2, r8
 800283e:	189b      	adds	r3, r3, r2
 8002840:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002844:	464b      	mov	r3, r9
 8002846:	460a      	mov	r2, r1
 8002848:	eb42 0303 	adc.w	r3, r2, r3
 800284c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	67bb      	str	r3, [r7, #120]	; 0x78
 800285a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002868:	4649      	mov	r1, r9
 800286a:	008b      	lsls	r3, r1, #2
 800286c:	4641      	mov	r1, r8
 800286e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002872:	4641      	mov	r1, r8
 8002874:	008a      	lsls	r2, r1, #2
 8002876:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800287a:	f7fd fd09 	bl	8000290 <__aeabi_uldivmod>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4611      	mov	r1, r2
 8002884:	4b38      	ldr	r3, [pc, #224]	; (8002968 <UART_SetConfig+0x4e4>)
 8002886:	fba3 2301 	umull	r2, r3, r3, r1
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2264      	movs	r2, #100	; 0x64
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	1acb      	subs	r3, r1, r3
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	3332      	adds	r3, #50	; 0x32
 8002898:	4a33      	ldr	r2, [pc, #204]	; (8002968 <UART_SetConfig+0x4e4>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028a4:	441c      	add	r4, r3
 80028a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028aa:	2200      	movs	r2, #0
 80028ac:	673b      	str	r3, [r7, #112]	; 0x70
 80028ae:	677a      	str	r2, [r7, #116]	; 0x74
 80028b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80028b4:	4642      	mov	r2, r8
 80028b6:	464b      	mov	r3, r9
 80028b8:	1891      	adds	r1, r2, r2
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	415b      	adcs	r3, r3
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028c4:	4641      	mov	r1, r8
 80028c6:	1851      	adds	r1, r2, r1
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	4649      	mov	r1, r9
 80028cc:	414b      	adcs	r3, r1
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028dc:	4659      	mov	r1, fp
 80028de:	00cb      	lsls	r3, r1, #3
 80028e0:	4651      	mov	r1, sl
 80028e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e6:	4651      	mov	r1, sl
 80028e8:	00ca      	lsls	r2, r1, #3
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	4642      	mov	r2, r8
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80028f6:	464b      	mov	r3, r9
 80028f8:	460a      	mov	r2, r1
 80028fa:	eb42 0303 	adc.w	r3, r2, r3
 80028fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	663b      	str	r3, [r7, #96]	; 0x60
 800290a:	667a      	str	r2, [r7, #100]	; 0x64
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002918:	4649      	mov	r1, r9
 800291a:	008b      	lsls	r3, r1, #2
 800291c:	4641      	mov	r1, r8
 800291e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002922:	4641      	mov	r1, r8
 8002924:	008a      	lsls	r2, r1, #2
 8002926:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800292a:	f7fd fcb1 	bl	8000290 <__aeabi_uldivmod>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <UART_SetConfig+0x4e4>)
 8002934:	fba3 1302 	umull	r1, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	2164      	movs	r1, #100	; 0x64
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	3332      	adds	r3, #50	; 0x32
 8002946:	4a08      	ldr	r2, [pc, #32]	; (8002968 <UART_SetConfig+0x4e4>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	f003 020f 	and.w	r2, r3, #15
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4422      	add	r2, r4
 800295a:	609a      	str	r2, [r3, #8]
}
 800295c:	bf00      	nop
 800295e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002962:	46bd      	mov	sp, r7
 8002964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002968:	51eb851f 	.word	0x51eb851f

0800296c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002970:	f000 fa20 	bl	8002db4 <vTaskStartScheduler>
  
  return osOK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	bd80      	pop	{r7, pc}

0800297a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f103 0208 	add.w	r2, r3, #8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f04f 32ff 	mov.w	r2, #4294967295
 8002992:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f103 0208 	add.w	r2, r3, #8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f103 0208 	add.w	r2, r3, #8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	601a      	str	r2, [r3, #0]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6892      	ldr	r2, [r2, #8]
 8002a32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6852      	ldr	r2, [r2, #4]
 8002a3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d103      	bne.n	8002a50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	1e5a      	subs	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08e      	sub	sp, #56	; 0x38
 8002a74:	af04      	add	r7, sp, #16
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a96:	bf00      	nop
 8002a98:	e7fe      	b.n	8002a98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <xTaskCreateStatic+0x46>
	__asm volatile
 8002aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	61fb      	str	r3, [r7, #28]
}
 8002ab2:	bf00      	nop
 8002ab4:	e7fe      	b.n	8002ab4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ab6:	2360      	movs	r3, #96	; 0x60
 8002ab8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b60      	cmp	r3, #96	; 0x60
 8002abe:	d00a      	beq.n	8002ad6 <xTaskCreateStatic+0x66>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	61bb      	str	r3, [r7, #24]
}
 8002ad2:	bf00      	nop
 8002ad4:	e7fe      	b.n	8002ad4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ad6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d01e      	beq.n	8002b1c <xTaskCreateStatic+0xac>
 8002ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01b      	beq.n	8002b1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002af6:	2300      	movs	r3, #0
 8002af8:	9303      	str	r3, [sp, #12]
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	9302      	str	r3, [sp, #8]
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f850 	bl	8002bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b16:	f000 f8df 	bl	8002cd8 <prvAddNewTaskToReadyList>
 8002b1a:	e001      	b.n	8002b20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b20:	697b      	ldr	r3, [r7, #20]
	}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3728      	adds	r7, #40	; 0x28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b08c      	sub	sp, #48	; 0x30
 8002b2e:	af04      	add	r7, sp, #16
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	4613      	mov	r3, r2
 8002b38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fe6a 	bl	8003818 <pvPortMalloc>
 8002b44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00e      	beq.n	8002b6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b4c:	2060      	movs	r0, #96	; 0x60
 8002b4e:	f000 fe63 	bl	8003818 <pvPortMalloc>
 8002b52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b60:	e005      	b.n	8002b6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f000 ff24 	bl	80039b0 <vPortFree>
 8002b68:	e001      	b.n	8002b6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d017      	beq.n	8002ba4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	9303      	str	r3, [sp, #12]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	9302      	str	r3, [sp, #8]
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f80e 	bl	8002bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b98:	69f8      	ldr	r0, [r7, #28]
 8002b9a:	f000 f89d 	bl	8002cd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	e002      	b.n	8002baa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002baa:	69bb      	ldr	r3, [r7, #24]
	}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	461a      	mov	r2, r3
 8002bcc:	21a5      	movs	r1, #165	; 0xa5
 8002bce:	f001 fe44 	bl	800485a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	f023 0307 	bic.w	r3, r3, #7
 8002bea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <prvInitialiseNewTask+0x58>
	__asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	617b      	str	r3, [r7, #20]
}
 8002c08:	bf00      	nop
 8002c0a:	e7fe      	b.n	8002c0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d01f      	beq.n	8002c52 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	e012      	b.n	8002c3e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	7819      	ldrb	r1, [r3, #0]
 8002c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	3334      	adds	r3, #52	; 0x34
 8002c28:	460a      	mov	r2, r1
 8002c2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	2b0f      	cmp	r3, #15
 8002c42:	d9e9      	bls.n	8002c18 <prvInitialiseNewTask+0x64>
 8002c44:	e000      	b.n	8002c48 <prvInitialiseNewTask+0x94>
			{
				break;
 8002c46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c50:	e003      	b.n	8002c5a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d901      	bls.n	8002c64 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c60:	2306      	movs	r3, #6
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	2200      	movs	r2, #0
 8002c74:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	3304      	adds	r3, #4
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fe9d 	bl	80029ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	3318      	adds	r3, #24
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fe98 	bl	80029ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	f1c3 0207 	rsb	r2, r3, #7
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	2200      	movs	r2, #0
 8002caa:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	68f9      	ldr	r1, [r7, #12]
 8002cb8:	69b8      	ldr	r0, [r7, #24]
 8002cba:	f000 fb9b 	bl	80033f4 <pxPortInitialiseStack>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cd0:	bf00      	nop
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ce0:	f000 fcb8 	bl	8003654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	; (8002d98 <prvAddNewTaskToReadyList+0xc0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	4a2b      	ldr	r2, [pc, #172]	; (8002d98 <prvAddNewTaskToReadyList+0xc0>)
 8002cec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002cee:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <prvAddNewTaskToReadyList+0xc4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002cf6:	4a29      	ldr	r2, [pc, #164]	; (8002d9c <prvAddNewTaskToReadyList+0xc4>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cfc:	4b26      	ldr	r3, [pc, #152]	; (8002d98 <prvAddNewTaskToReadyList+0xc0>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d110      	bne.n	8002d26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d04:	f000 fab8 	bl	8003278 <prvInitialiseTaskLists>
 8002d08:	e00d      	b.n	8002d26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d0a:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <prvAddNewTaskToReadyList+0xc8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d12:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <prvAddNewTaskToReadyList+0xc4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d802      	bhi.n	8002d26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d20:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <prvAddNewTaskToReadyList+0xc4>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d26:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <prvAddNewTaskToReadyList+0xcc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <prvAddNewTaskToReadyList+0xcc>)
 8002d2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <prvAddNewTaskToReadyList+0xcc>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <prvAddNewTaskToReadyList+0xd0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	4a18      	ldr	r2, [pc, #96]	; (8002da8 <prvAddNewTaskToReadyList+0xd0>)
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4a15      	ldr	r2, [pc, #84]	; (8002dac <prvAddNewTaskToReadyList+0xd4>)
 8002d58:	441a      	add	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4610      	mov	r0, r2
 8002d62:	f7ff fe37 	bl	80029d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d66:	f000 fca5 	bl	80036b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <prvAddNewTaskToReadyList+0xc8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00e      	beq.n	8002d90 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <prvAddNewTaskToReadyList+0xc4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d207      	bcs.n	8002d90 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <prvAddNewTaskToReadyList+0xd8>)
 8002d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200004e4 	.word	0x200004e4
 8002d9c:	200003e4 	.word	0x200003e4
 8002da0:	200004f0 	.word	0x200004f0
 8002da4:	20000500 	.word	0x20000500
 8002da8:	200004ec 	.word	0x200004ec
 8002dac:	200003e8 	.word	0x200003e8
 8002db0:	e000ed04 	.word	0xe000ed04

08002db4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002dc2:	463a      	mov	r2, r7
 8002dc4:	1d39      	adds	r1, r7, #4
 8002dc6:	f107 0308 	add.w	r3, r7, #8
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fbde 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	9202      	str	r2, [sp, #8]
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	2300      	movs	r3, #0
 8002de0:	460a      	mov	r2, r1
 8002de2:	491f      	ldr	r1, [pc, #124]	; (8002e60 <vTaskStartScheduler+0xac>)
 8002de4:	481f      	ldr	r0, [pc, #124]	; (8002e64 <vTaskStartScheduler+0xb0>)
 8002de6:	f7ff fe43 	bl	8002a70 <xTaskCreateStatic>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <vTaskStartScheduler+0xb4>)
 8002dee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <vTaskStartScheduler+0xb4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	e001      	b.n	8002e02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d118      	bne.n	8002e3a <vTaskStartScheduler+0x86>
	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	613b      	str	r3, [r7, #16]
}
 8002e1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <vTaskStartScheduler+0xb8>)
 8002e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <vTaskStartScheduler+0xbc>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <vTaskStartScheduler+0xc0>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8002e30:	f7fd fd2e 	bl	8000890 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e34:	f000 fb6c 	bl	8003510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e38:	e00e      	b.n	8002e58 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d10a      	bne.n	8002e58 <vTaskStartScheduler+0xa4>
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	60fb      	str	r3, [r7, #12]
}
 8002e54:	bf00      	nop
 8002e56:	e7fe      	b.n	8002e56 <vTaskStartScheduler+0xa2>
}
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	080056c8 	.word	0x080056c8
 8002e64:	08003249 	.word	0x08003249
 8002e68:	20000508 	.word	0x20000508
 8002e6c:	20000504 	.word	0x20000504
 8002e70:	200004f0 	.word	0x200004f0
 8002e74:	200004e8 	.word	0x200004e8

08002e78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <vTaskSuspendAll+0x18>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	4a03      	ldr	r2, [pc, #12]	; (8002e90 <vTaskSuspendAll+0x18>)
 8002e84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002e86:	bf00      	nop
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	2000050c 	.word	0x2000050c

08002e94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ea2:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <xTaskResumeAll+0x114>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <xTaskResumeAll+0x2c>
	__asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	603b      	str	r3, [r7, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	e7fe      	b.n	8002ebe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ec0:	f000 fbc8 	bl	8003654 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ec4:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <xTaskResumeAll+0x114>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	4a37      	ldr	r2, [pc, #220]	; (8002fa8 <xTaskResumeAll+0x114>)
 8002ecc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <xTaskResumeAll+0x114>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d161      	bne.n	8002f9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ed6:	4b35      	ldr	r3, [pc, #212]	; (8002fac <xTaskResumeAll+0x118>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d05d      	beq.n	8002f9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ede:	e02e      	b.n	8002f3e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee0:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <xTaskResumeAll+0x11c>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3318      	adds	r3, #24
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fd95 	bl	8002a1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fd90 	bl	8002a1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	2201      	movs	r2, #1
 8002f02:	409a      	lsls	r2, r3
 8002f04:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <xTaskResumeAll+0x120>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	4a2a      	ldr	r2, [pc, #168]	; (8002fb4 <xTaskResumeAll+0x120>)
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <xTaskResumeAll+0x124>)
 8002f1c:	441a      	add	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3304      	adds	r3, #4
 8002f22:	4619      	mov	r1, r3
 8002f24:	4610      	mov	r0, r2
 8002f26:	f7ff fd55 	bl	80029d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2e:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <xTaskResumeAll+0x128>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <xTaskResumeAll+0x12c>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <xTaskResumeAll+0x11c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1cc      	bne.n	8002ee0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f4c:	f000 fa32 	bl	80033b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f50:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <xTaskResumeAll+0x130>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f5c:	f000 f846 	bl	8002fec <xTaskIncrementTick>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <xTaskResumeAll+0x12c>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f1      	bne.n	8002f5c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002f78:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <xTaskResumeAll+0x130>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <xTaskResumeAll+0x12c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f86:	2301      	movs	r3, #1
 8002f88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <xTaskResumeAll+0x134>)
 8002f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f9a:	f000 fb8b 	bl	80036b4 <vPortExitCritical>

	return xAlreadyYielded;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	2000050c 	.word	0x2000050c
 8002fac:	200004e4 	.word	0x200004e4
 8002fb0:	200004a4 	.word	0x200004a4
 8002fb4:	200004ec 	.word	0x200004ec
 8002fb8:	200003e8 	.word	0x200003e8
 8002fbc:	200003e4 	.word	0x200003e4
 8002fc0:	200004f8 	.word	0x200004f8
 8002fc4:	200004f4 	.word	0x200004f4
 8002fc8:	e000ed04 	.word	0xe000ed04

08002fcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <xTaskGetTickCount+0x1c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002fd8:	687b      	ldr	r3, [r7, #4]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	200004e8 	.word	0x200004e8

08002fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ff6:	4b4e      	ldr	r3, [pc, #312]	; (8003130 <xTaskIncrementTick+0x144>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 808e 	bne.w	800311c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003000:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <xTaskIncrementTick+0x148>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003008:	4a4a      	ldr	r2, [pc, #296]	; (8003134 <xTaskIncrementTick+0x148>)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d120      	bne.n	8003056 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003014:	4b48      	ldr	r3, [pc, #288]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <xTaskIncrementTick+0x48>
	__asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	603b      	str	r3, [r7, #0]
}
 8003030:	bf00      	nop
 8003032:	e7fe      	b.n	8003032 <xTaskIncrementTick+0x46>
 8003034:	4b40      	ldr	r3, [pc, #256]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4b40      	ldr	r3, [pc, #256]	; (800313c <xTaskIncrementTick+0x150>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a3e      	ldr	r2, [pc, #248]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4a3e      	ldr	r2, [pc, #248]	; (800313c <xTaskIncrementTick+0x150>)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b3d      	ldr	r3, [pc, #244]	; (8003140 <xTaskIncrementTick+0x154>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3301      	adds	r3, #1
 800304e:	4a3c      	ldr	r2, [pc, #240]	; (8003140 <xTaskIncrementTick+0x154>)
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	f000 f9af 	bl	80033b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003056:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <xTaskIncrementTick+0x158>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	429a      	cmp	r2, r3
 800305e:	d348      	bcc.n	80030f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003060:	4b35      	ldr	r3, [pc, #212]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d104      	bne.n	8003074 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800306a:	4b36      	ldr	r3, [pc, #216]	; (8003144 <xTaskIncrementTick+0x158>)
 800306c:	f04f 32ff 	mov.w	r2, #4294967295
 8003070:	601a      	str	r2, [r3, #0]
					break;
 8003072:	e03e      	b.n	80030f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003074:	4b30      	ldr	r3, [pc, #192]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	429a      	cmp	r2, r3
 800308a:	d203      	bcs.n	8003094 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800308c:	4a2d      	ldr	r2, [pc, #180]	; (8003144 <xTaskIncrementTick+0x158>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003092:	e02e      	b.n	80030f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	3304      	adds	r3, #4
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fcbf 	bl	8002a1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	3318      	adds	r3, #24
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fcb6 	bl	8002a1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	2201      	movs	r2, #1
 80030b6:	409a      	lsls	r2, r3
 80030b8:	4b23      	ldr	r3, [pc, #140]	; (8003148 <xTaskIncrementTick+0x15c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4313      	orrs	r3, r2
 80030be:	4a22      	ldr	r2, [pc, #136]	; (8003148 <xTaskIncrementTick+0x15c>)
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4a1f      	ldr	r2, [pc, #124]	; (800314c <xTaskIncrementTick+0x160>)
 80030d0:	441a      	add	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3304      	adds	r3, #4
 80030d6:	4619      	mov	r1, r3
 80030d8:	4610      	mov	r0, r2
 80030da:	f7ff fc7b 	bl	80029d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <xTaskIncrementTick+0x164>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d3b9      	bcc.n	8003060 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80030ec:	2301      	movs	r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030f0:	e7b6      	b.n	8003060 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <xTaskIncrementTick+0x164>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f8:	4914      	ldr	r1, [pc, #80]	; (800314c <xTaskIncrementTick+0x160>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d901      	bls.n	800310e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800310a:	2301      	movs	r3, #1
 800310c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <xTaskIncrementTick+0x168>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003116:	2301      	movs	r3, #1
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e004      	b.n	8003126 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800311c:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <xTaskIncrementTick+0x16c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3301      	adds	r3, #1
 8003122:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <xTaskIncrementTick+0x16c>)
 8003124:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003126:	697b      	ldr	r3, [r7, #20]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	2000050c 	.word	0x2000050c
 8003134:	200004e8 	.word	0x200004e8
 8003138:	2000049c 	.word	0x2000049c
 800313c:	200004a0 	.word	0x200004a0
 8003140:	200004fc 	.word	0x200004fc
 8003144:	20000504 	.word	0x20000504
 8003148:	200004ec 	.word	0x200004ec
 800314c:	200003e8 	.word	0x200003e8
 8003150:	200003e4 	.word	0x200003e4
 8003154:	200004f8 	.word	0x200004f8
 8003158:	200004f4 	.word	0x200004f4

0800315c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003162:	4b32      	ldr	r3, [pc, #200]	; (800322c <vTaskSwitchContext+0xd0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800316a:	4b31      	ldr	r3, [pc, #196]	; (8003230 <vTaskSwitchContext+0xd4>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003170:	e058      	b.n	8003224 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8003172:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <vTaskSwitchContext+0xd4>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003178:	f7fd fb96 	bl	80008a8 <getRunTimeCounterValue>
 800317c:	4603      	mov	r3, r0
 800317e:	4a2d      	ldr	r2, [pc, #180]	; (8003234 <vTaskSwitchContext+0xd8>)
 8003180:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8003182:	4b2c      	ldr	r3, [pc, #176]	; (8003234 <vTaskSwitchContext+0xd8>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <vTaskSwitchContext+0xdc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d909      	bls.n	80031a2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800318e:	4b2b      	ldr	r3, [pc, #172]	; (800323c <vTaskSwitchContext+0xe0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003194:	4a27      	ldr	r2, [pc, #156]	; (8003234 <vTaskSwitchContext+0xd8>)
 8003196:	6810      	ldr	r0, [r2, #0]
 8003198:	4a27      	ldr	r2, [pc, #156]	; (8003238 <vTaskSwitchContext+0xdc>)
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	1a82      	subs	r2, r0, r2
 800319e:	440a      	add	r2, r1
 80031a0:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <vTaskSwitchContext+0xd8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a24      	ldr	r2, [pc, #144]	; (8003238 <vTaskSwitchContext+0xdc>)
 80031a8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031aa:	4b25      	ldr	r3, [pc, #148]	; (8003240 <vTaskSwitchContext+0xe4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80031b8:	7afb      	ldrb	r3, [r7, #11]
 80031ba:	f1c3 031f 	rsb	r3, r3, #31
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	4920      	ldr	r1, [pc, #128]	; (8003244 <vTaskSwitchContext+0xe8>)
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <vTaskSwitchContext+0x8e>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	607b      	str	r3, [r7, #4]
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <vTaskSwitchContext+0x8c>
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <vTaskSwitchContext+0xe8>)
 80031f6:	4413      	add	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	3308      	adds	r3, #8
 800320c:	429a      	cmp	r2, r3
 800320e:	d104      	bne.n	800321a <vTaskSwitchContext+0xbe>
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4a06      	ldr	r2, [pc, #24]	; (800323c <vTaskSwitchContext+0xe0>)
 8003222:	6013      	str	r3, [r2, #0]
}
 8003224:	bf00      	nop
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	2000050c 	.word	0x2000050c
 8003230:	200004f8 	.word	0x200004f8
 8003234:	20000514 	.word	0x20000514
 8003238:	20000510 	.word	0x20000510
 800323c:	200003e4 	.word	0x200003e4
 8003240:	200004ec 	.word	0x200004ec
 8003244:	200003e8 	.word	0x200003e8

08003248 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003250:	f000 f852 	bl	80032f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <prvIdleTask+0x28>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d9f9      	bls.n	8003250 <prvIdleTask+0x8>
			{
				taskYIELD();
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <prvIdleTask+0x2c>)
 800325e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800326c:	e7f0      	b.n	8003250 <prvIdleTask+0x8>
 800326e:	bf00      	nop
 8003270:	200003e8 	.word	0x200003e8
 8003274:	e000ed04 	.word	0xe000ed04

08003278 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800327e:	2300      	movs	r3, #0
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	e00c      	b.n	800329e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <prvInitialiseTaskLists+0x60>)
 8003290:	4413      	add	r3, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fb71 	bl	800297a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3301      	adds	r3, #1
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b06      	cmp	r3, #6
 80032a2:	d9ef      	bls.n	8003284 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80032a4:	480d      	ldr	r0, [pc, #52]	; (80032dc <prvInitialiseTaskLists+0x64>)
 80032a6:	f7ff fb68 	bl	800297a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032aa:	480d      	ldr	r0, [pc, #52]	; (80032e0 <prvInitialiseTaskLists+0x68>)
 80032ac:	f7ff fb65 	bl	800297a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032b0:	480c      	ldr	r0, [pc, #48]	; (80032e4 <prvInitialiseTaskLists+0x6c>)
 80032b2:	f7ff fb62 	bl	800297a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80032b6:	480c      	ldr	r0, [pc, #48]	; (80032e8 <prvInitialiseTaskLists+0x70>)
 80032b8:	f7ff fb5f 	bl	800297a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80032bc:	480b      	ldr	r0, [pc, #44]	; (80032ec <prvInitialiseTaskLists+0x74>)
 80032be:	f7ff fb5c 	bl	800297a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <prvInitialiseTaskLists+0x78>)
 80032c4:	4a05      	ldr	r2, [pc, #20]	; (80032dc <prvInitialiseTaskLists+0x64>)
 80032c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <prvInitialiseTaskLists+0x7c>)
 80032ca:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <prvInitialiseTaskLists+0x68>)
 80032cc:	601a      	str	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200003e8 	.word	0x200003e8
 80032dc:	20000474 	.word	0x20000474
 80032e0:	20000488 	.word	0x20000488
 80032e4:	200004a4 	.word	0x200004a4
 80032e8:	200004b8 	.word	0x200004b8
 80032ec:	200004d0 	.word	0x200004d0
 80032f0:	2000049c 	.word	0x2000049c
 80032f4:	200004a0 	.word	0x200004a0

080032f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032fe:	e019      	b.n	8003334 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003300:	f000 f9a8 	bl	8003654 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <prvCheckTasksWaitingTermination+0x50>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3304      	adds	r3, #4
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fb83 	bl	8002a1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003316:	4b0d      	ldr	r3, [pc, #52]	; (800334c <prvCheckTasksWaitingTermination+0x54>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3b01      	subs	r3, #1
 800331c:	4a0b      	ldr	r2, [pc, #44]	; (800334c <prvCheckTasksWaitingTermination+0x54>)
 800331e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <prvCheckTasksWaitingTermination+0x58>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3b01      	subs	r3, #1
 8003326:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <prvCheckTasksWaitingTermination+0x58>)
 8003328:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800332a:	f000 f9c3 	bl	80036b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f810 	bl	8003354 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <prvCheckTasksWaitingTermination+0x58>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e1      	bne.n	8003300 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200004b8 	.word	0x200004b8
 800334c:	200004e4 	.word	0x200004e4
 8003350:	200004cc 	.word	0x200004cc

08003354 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003362:	2b00      	cmp	r3, #0
 8003364:	d108      	bne.n	8003378 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fb20 	bl	80039b0 <vPortFree>
				vPortFree( pxTCB );
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fb1d 	bl	80039b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003376:	e018      	b.n	80033aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800337e:	2b01      	cmp	r3, #1
 8003380:	d103      	bne.n	800338a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fb14 	bl	80039b0 <vPortFree>
	}
 8003388:	e00f      	b.n	80033aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003390:	2b02      	cmp	r3, #2
 8003392:	d00a      	beq.n	80033aa <prvDeleteTCB+0x56>
	__asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	60fb      	str	r3, [r7, #12]
}
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <prvDeleteTCB+0x54>
	}
 80033aa:	bf00      	nop
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <prvResetNextTaskUnblockTime+0x38>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d104      	bne.n	80033ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <prvResetNextTaskUnblockTime+0x3c>)
 80033c6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80033cc:	e008      	b.n	80033e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ce:	4b07      	ldr	r3, [pc, #28]	; (80033ec <prvResetNextTaskUnblockTime+0x38>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <prvResetNextTaskUnblockTime+0x3c>)
 80033de:	6013      	str	r3, [r2, #0]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	2000049c 	.word	0x2000049c
 80033f0:	20000504 	.word	0x20000504

080033f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3b04      	subs	r3, #4
 8003404:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800340c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3b04      	subs	r3, #4
 8003412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f023 0201 	bic.w	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3b04      	subs	r3, #4
 8003422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003424:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <pxPortInitialiseStack+0x64>)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3b14      	subs	r3, #20
 800342e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3b04      	subs	r3, #4
 800343a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f06f 0202 	mvn.w	r2, #2
 8003442:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3b20      	subs	r3, #32
 8003448:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800344a:	68fb      	ldr	r3, [r7, #12]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	0800345d 	.word	0x0800345d

0800345c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <prvTaskExitError+0x54>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d00a      	beq.n	8003486 <prvTaskExitError+0x2a>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	60fb      	str	r3, [r7, #12]
}
 8003482:	bf00      	nop
 8003484:	e7fe      	b.n	8003484 <prvTaskExitError+0x28>
	__asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	60bb      	str	r3, [r7, #8]
}
 8003498:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800349a:	bf00      	nop
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0fc      	beq.n	800349c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034a2:	bf00      	nop
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	2000000c 	.word	0x2000000c
	...

080034c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <pxCurrentTCBConst2>)
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	6808      	ldr	r0, [r1, #0]
 80034c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ca:	f380 8809 	msr	PSP, r0
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f04f 0000 	mov.w	r0, #0
 80034d6:	f380 8811 	msr	BASEPRI, r0
 80034da:	4770      	bx	lr
 80034dc:	f3af 8000 	nop.w

080034e0 <pxCurrentTCBConst2>:
 80034e0:	200003e4 	.word	0x200003e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop

080034e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80034e8:	4808      	ldr	r0, [pc, #32]	; (800350c <prvPortStartFirstTask+0x24>)
 80034ea:	6800      	ldr	r0, [r0, #0]
 80034ec:	6800      	ldr	r0, [r0, #0]
 80034ee:	f380 8808 	msr	MSP, r0
 80034f2:	f04f 0000 	mov.w	r0, #0
 80034f6:	f380 8814 	msr	CONTROL, r0
 80034fa:	b662      	cpsie	i
 80034fc:	b661      	cpsie	f
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	df00      	svc	0
 8003508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800350a:	bf00      	nop
 800350c:	e000ed08 	.word	0xe000ed08

08003510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003516:	4b46      	ldr	r3, [pc, #280]	; (8003630 <xPortStartScheduler+0x120>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a46      	ldr	r2, [pc, #280]	; (8003634 <xPortStartScheduler+0x124>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d10a      	bne.n	8003536 <xPortStartScheduler+0x26>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	613b      	str	r3, [r7, #16]
}
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003536:	4b3e      	ldr	r3, [pc, #248]	; (8003630 <xPortStartScheduler+0x120>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a3f      	ldr	r2, [pc, #252]	; (8003638 <xPortStartScheduler+0x128>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d10a      	bne.n	8003556 <xPortStartScheduler+0x46>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	60fb      	str	r3, [r7, #12]
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003556:	4b39      	ldr	r3, [pc, #228]	; (800363c <xPortStartScheduler+0x12c>)
 8003558:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	22ff      	movs	r2, #255	; 0xff
 8003566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b31      	ldr	r3, [pc, #196]	; (8003640 <xPortStartScheduler+0x130>)
 800357c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800357e:	4b31      	ldr	r3, [pc, #196]	; (8003644 <xPortStartScheduler+0x134>)
 8003580:	2207      	movs	r2, #7
 8003582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003584:	e009      	b.n	800359a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003586:	4b2f      	ldr	r3, [pc, #188]	; (8003644 <xPortStartScheduler+0x134>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3b01      	subs	r3, #1
 800358c:	4a2d      	ldr	r2, [pc, #180]	; (8003644 <xPortStartScheduler+0x134>)
 800358e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	b2db      	uxtb	r3, r3
 8003598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b80      	cmp	r3, #128	; 0x80
 80035a4:	d0ef      	beq.n	8003586 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035a6:	4b27      	ldr	r3, [pc, #156]	; (8003644 <xPortStartScheduler+0x134>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f1c3 0307 	rsb	r3, r3, #7
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d00a      	beq.n	80035c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	60bb      	str	r3, [r7, #8]
}
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035c8:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <xPortStartScheduler+0x134>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <xPortStartScheduler+0x134>)
 80035d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035d2:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <xPortStartScheduler+0x134>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035da:	4a1a      	ldr	r2, [pc, #104]	; (8003644 <xPortStartScheduler+0x134>)
 80035dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035e6:	4b18      	ldr	r3, [pc, #96]	; (8003648 <xPortStartScheduler+0x138>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a17      	ldr	r2, [pc, #92]	; (8003648 <xPortStartScheduler+0x138>)
 80035ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <xPortStartScheduler+0x138>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a14      	ldr	r2, [pc, #80]	; (8003648 <xPortStartScheduler+0x138>)
 80035f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80035fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035fe:	f000 f8dd 	bl	80037bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <xPortStartScheduler+0x13c>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003608:	f000 f8fc 	bl	8003804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800360c:	4b10      	ldr	r3, [pc, #64]	; (8003650 <xPortStartScheduler+0x140>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a0f      	ldr	r2, [pc, #60]	; (8003650 <xPortStartScheduler+0x140>)
 8003612:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003616:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003618:	f7ff ff66 	bl	80034e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800361c:	f7ff fd9e 	bl	800315c <vTaskSwitchContext>
	prvTaskExitError();
 8003620:	f7ff ff1c 	bl	800345c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	e000ed00 	.word	0xe000ed00
 8003634:	410fc271 	.word	0x410fc271
 8003638:	410fc270 	.word	0x410fc270
 800363c:	e000e400 	.word	0xe000e400
 8003640:	20000518 	.word	0x20000518
 8003644:	2000051c 	.word	0x2000051c
 8003648:	e000ed20 	.word	0xe000ed20
 800364c:	2000000c 	.word	0x2000000c
 8003650:	e000ef34 	.word	0xe000ef34

08003654 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
	__asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	607b      	str	r3, [r7, #4]
}
 800366c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <vPortEnterCritical+0x58>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3301      	adds	r3, #1
 8003674:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <vPortEnterCritical+0x58>)
 8003676:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <vPortEnterCritical+0x58>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d10f      	bne.n	80036a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <vPortEnterCritical+0x5c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	603b      	str	r3, [r7, #0]
}
 800369c:	bf00      	nop
 800369e:	e7fe      	b.n	800369e <vPortEnterCritical+0x4a>
	}
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	2000000c 	.word	0x2000000c
 80036b0:	e000ed04 	.word	0xe000ed04

080036b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <vPortExitCritical+0x50>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <vPortExitCritical+0x24>
	__asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	607b      	str	r3, [r7, #4]
}
 80036d4:	bf00      	nop
 80036d6:	e7fe      	b.n	80036d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <vPortExitCritical+0x50>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3b01      	subs	r3, #1
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <vPortExitCritical+0x50>)
 80036e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <vPortExitCritical+0x50>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d105      	bne.n	80036f6 <vPortExitCritical+0x42>
 80036ea:	2300      	movs	r3, #0
 80036ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	2000000c 	.word	0x2000000c
	...

08003710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003710:	f3ef 8009 	mrs	r0, PSP
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	4b15      	ldr	r3, [pc, #84]	; (8003770 <pxCurrentTCBConst>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	f01e 0f10 	tst.w	lr, #16
 8003720:	bf08      	it	eq
 8003722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372a:	6010      	str	r0, [r2, #0]
 800372c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003734:	f380 8811 	msr	BASEPRI, r0
 8003738:	f3bf 8f4f 	dsb	sy
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f7ff fd0c 	bl	800315c <vTaskSwitchContext>
 8003744:	f04f 0000 	mov.w	r0, #0
 8003748:	f380 8811 	msr	BASEPRI, r0
 800374c:	bc09      	pop	{r0, r3}
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	6808      	ldr	r0, [r1, #0]
 8003752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003756:	f01e 0f10 	tst.w	lr, #16
 800375a:	bf08      	it	eq
 800375c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003760:	f380 8809 	msr	PSP, r0
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	f3af 8000 	nop.w

08003770 <pxCurrentTCBConst>:
 8003770:	200003e4 	.word	0x200003e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop

08003778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	607b      	str	r3, [r7, #4]
}
 8003790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003792:	f7ff fc2b 	bl	8002fec <xTaskIncrementTick>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <SysTick_Handler+0x40>)
 800379e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	2300      	movs	r3, #0
 80037a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f383 8811 	msr	BASEPRI, r3
}
 80037ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	e000ed04 	.word	0xe000ed04

080037bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <vPortSetupTimerInterrupt+0x34>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <vPortSetupTimerInterrupt+0x38>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <vPortSetupTimerInterrupt+0x3c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <vPortSetupTimerInterrupt+0x40>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	099b      	lsrs	r3, r3, #6
 80037d8:	4a09      	ldr	r2, [pc, #36]	; (8003800 <vPortSetupTimerInterrupt+0x44>)
 80037da:	3b01      	subs	r3, #1
 80037dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037de:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <vPortSetupTimerInterrupt+0x34>)
 80037e0:	2207      	movs	r2, #7
 80037e2:	601a      	str	r2, [r3, #0]
}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000e010 	.word	0xe000e010
 80037f4:	e000e018 	.word	0xe000e018
 80037f8:	20000000 	.word	0x20000000
 80037fc:	10624dd3 	.word	0x10624dd3
 8003800:	e000e014 	.word	0xe000e014

08003804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003814 <vPortEnableVFP+0x10>
 8003808:	6801      	ldr	r1, [r0, #0]
 800380a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800380e:	6001      	str	r1, [r0, #0]
 8003810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003812:	bf00      	nop
 8003814:	e000ed88 	.word	0xe000ed88

08003818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003824:	f7ff fb28 	bl	8002e78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003828:	4b5b      	ldr	r3, [pc, #364]	; (8003998 <pvPortMalloc+0x180>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003830:	f000 f920 	bl	8003a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003834:	4b59      	ldr	r3, [pc, #356]	; (800399c <pvPortMalloc+0x184>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	f040 8093 	bne.w	8003968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01d      	beq.n	8003884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003848:	2208      	movs	r2, #8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	2b00      	cmp	r3, #0
 8003858:	d014      	beq.n	8003884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f023 0307 	bic.w	r3, r3, #7
 8003860:	3308      	adds	r3, #8
 8003862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <pvPortMalloc+0x6c>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	617b      	str	r3, [r7, #20]
}
 8003880:	bf00      	nop
 8003882:	e7fe      	b.n	8003882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d06e      	beq.n	8003968 <pvPortMalloc+0x150>
 800388a:	4b45      	ldr	r3, [pc, #276]	; (80039a0 <pvPortMalloc+0x188>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d869      	bhi.n	8003968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003894:	4b43      	ldr	r3, [pc, #268]	; (80039a4 <pvPortMalloc+0x18c>)
 8003896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003898:	4b42      	ldr	r3, [pc, #264]	; (80039a4 <pvPortMalloc+0x18c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800389e:	e004      	b.n	80038aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d903      	bls.n	80038bc <pvPortMalloc+0xa4>
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f1      	bne.n	80038a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80038bc:	4b36      	ldr	r3, [pc, #216]	; (8003998 <pvPortMalloc+0x180>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d050      	beq.n	8003968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2208      	movs	r2, #8
 80038cc:	4413      	add	r3, r2
 80038ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	1ad2      	subs	r2, r2, r3
 80038e0:	2308      	movs	r3, #8
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d91f      	bls.n	8003928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <pvPortMalloc+0xf8>
	__asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	613b      	str	r3, [r7, #16]
}
 800390c:	bf00      	nop
 800390e:	e7fe      	b.n	800390e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	1ad2      	subs	r2, r2, r3
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003922:	69b8      	ldr	r0, [r7, #24]
 8003924:	f000 f908 	bl	8003b38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <pvPortMalloc+0x188>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <pvPortMalloc+0x188>)
 8003934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <pvPortMalloc+0x188>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <pvPortMalloc+0x190>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d203      	bcs.n	800394a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <pvPortMalloc+0x188>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <pvPortMalloc+0x190>)
 8003948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <pvPortMalloc+0x184>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	431a      	orrs	r2, r3
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800395e:	4b13      	ldr	r3, [pc, #76]	; (80039ac <pvPortMalloc+0x194>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3301      	adds	r3, #1
 8003964:	4a11      	ldr	r2, [pc, #68]	; (80039ac <pvPortMalloc+0x194>)
 8003966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003968:	f7ff fa94 	bl	8002e94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <pvPortMalloc+0x174>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	60fb      	str	r3, [r7, #12]
}
 8003988:	bf00      	nop
 800398a:	e7fe      	b.n	800398a <pvPortMalloc+0x172>
	return pvReturn;
 800398c:	69fb      	ldr	r3, [r7, #28]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3728      	adds	r7, #40	; 0x28
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	20004128 	.word	0x20004128
 800399c:	2000413c 	.word	0x2000413c
 80039a0:	2000412c 	.word	0x2000412c
 80039a4:	20004120 	.word	0x20004120
 80039a8:	20004130 	.word	0x20004130
 80039ac:	20004134 	.word	0x20004134

080039b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d04d      	beq.n	8003a5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80039c2:	2308      	movs	r3, #8
 80039c4:	425b      	negs	r3, r3
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4413      	add	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <vPortFree+0xb8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <vPortFree+0x44>
	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	60fb      	str	r3, [r7, #12]
}
 80039f0:	bf00      	nop
 80039f2:	e7fe      	b.n	80039f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <vPortFree+0x62>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	60bb      	str	r3, [r7, #8]
}
 8003a0e:	bf00      	nop
 8003a10:	e7fe      	b.n	8003a10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <vPortFree+0xb8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01e      	beq.n	8003a5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d11a      	bne.n	8003a5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <vPortFree+0xb8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	401a      	ands	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a38:	f7ff fa1e 	bl	8002e78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <vPortFree+0xbc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4413      	add	r3, r2
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <vPortFree+0xbc>)
 8003a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a4a:	6938      	ldr	r0, [r7, #16]
 8003a4c:	f000 f874 	bl	8003b38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003a50:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <vPortFree+0xc0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	4a06      	ldr	r2, [pc, #24]	; (8003a70 <vPortFree+0xc0>)
 8003a58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003a5a:	f7ff fa1b 	bl	8002e94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a5e:	bf00      	nop
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	2000413c 	.word	0x2000413c
 8003a6c:	2000412c 	.word	0x2000412c
 8003a70:	20004138 	.word	0x20004138

08003a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003a7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a80:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <prvHeapInit+0xac>)
 8003a82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00c      	beq.n	8003aa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3307      	adds	r3, #7
 8003a92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0307 	bic.w	r3, r3, #7
 8003a9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <prvHeapInit+0xac>)
 8003aa4:	4413      	add	r3, r2
 8003aa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003aac:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <prvHeapInit+0xb0>)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <prvHeapInit+0xb0>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	4413      	add	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0307 	bic.w	r3, r3, #7
 8003ace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <prvHeapInit+0xb4>)
 8003ad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ad6:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <prvHeapInit+0xb4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2200      	movs	r2, #0
 8003adc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ade:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <prvHeapInit+0xb4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	1ad2      	subs	r2, r2, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <prvHeapInit+0xb4>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <prvHeapInit+0xb8>)
 8003b02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4a09      	ldr	r2, [pc, #36]	; (8003b30 <prvHeapInit+0xbc>)
 8003b0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <prvHeapInit+0xc0>)
 8003b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b12:	601a      	str	r2, [r3, #0]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	20000520 	.word	0x20000520
 8003b24:	20004120 	.word	0x20004120
 8003b28:	20004128 	.word	0x20004128
 8003b2c:	20004130 	.word	0x20004130
 8003b30:	2000412c 	.word	0x2000412c
 8003b34:	2000413c 	.word	0x2000413c

08003b38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b40:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <prvInsertBlockIntoFreeList+0xac>)
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	e002      	b.n	8003b4c <prvInsertBlockIntoFreeList+0x14>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d8f7      	bhi.n	8003b46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	4413      	add	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d108      	bne.n	8003b7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	441a      	add	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	441a      	add	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d118      	bne.n	8003bc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <prvInsertBlockIntoFreeList+0xb0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d00d      	beq.n	8003bb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	441a      	add	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e008      	b.n	8003bc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <prvInsertBlockIntoFreeList+0xb0>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e003      	b.n	8003bc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d002      	beq.n	8003bd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20004120 	.word	0x20004120
 8003be8:	20004128 	.word	0x20004128

08003bec <app_init>:
xTaskHandle task_a_h;
xTaskHandle task_b_h;

/********************** external functions definition ************************/
void app_init(void)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af02      	add	r7, sp, #8
	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 8003bf2:	f7ff fd2f 	bl	8003654 <vPortEnterCritical>
 8003bf6:	4b4c      	ldr	r3, [pc, #304]	; (8003d28 <app_init+0x13c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a4c      	ldr	r2, [pc, #304]	; (8003d2c <app_init+0x140>)
 8003bfc:	213f      	movs	r1, #63	; 0x3f
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fdb4 	bl	800476c <sniprintf>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4a4a      	ldr	r2, [pc, #296]	; (8003d30 <app_init+0x144>)
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	4b47      	ldr	r3, [pc, #284]	; (8003d28 <app_init+0x13c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f8a8 	bl	8003d64 <logger_log_print_>
 8003c14:	f7ff fd4e 	bl	80036b4 <vPortExitCritical>
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)xTaskGetTickCount());
 8003c18:	f7ff fd1c 	bl	8003654 <vPortEnterCritical>
 8003c1c:	4b42      	ldr	r3, [pc, #264]	; (8003d28 <app_init+0x13c>)
 8003c1e:	681c      	ldr	r4, [r3, #0]
 8003c20:	f7ff f9d4 	bl	8002fcc <xTaskGetTickCount>
 8003c24:	4603      	mov	r3, r0
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	4b42      	ldr	r3, [pc, #264]	; (8003d34 <app_init+0x148>)
 8003c2a:	4a43      	ldr	r2, [pc, #268]	; (8003d38 <app_init+0x14c>)
 8003c2c:	213f      	movs	r1, #63	; 0x3f
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f000 fd9c 	bl	800476c <sniprintf>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4a3e      	ldr	r2, [pc, #248]	; (8003d30 <app_init+0x144>)
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <app_init+0x13c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 f890 	bl	8003d64 <logger_log_print_>
 8003c44:	f7ff fd36 	bl	80036b4 <vPortExitCritical>

	LOGGER_LOG(p_sys);
 8003c48:	f7ff fd04 	bl	8003654 <vPortEnterCritical>
 8003c4c:	4b36      	ldr	r3, [pc, #216]	; (8003d28 <app_init+0x13c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a3a      	ldr	r2, [pc, #232]	; (8003d3c <app_init+0x150>)
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	213f      	movs	r1, #63	; 0x3f
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fd88 	bl	800476c <sniprintf>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	4a34      	ldr	r2, [pc, #208]	; (8003d30 <app_init+0x144>)
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <app_init+0x13c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 f87c 	bl	8003d64 <logger_log_print_>
 8003c6c:	f7ff fd22 	bl	80036b4 <vPortExitCritical>
	LOGGER_LOG(p_app);
 8003c70:	f7ff fcf0 	bl	8003654 <vPortEnterCritical>
 8003c74:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <app_init+0x13c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a31      	ldr	r2, [pc, #196]	; (8003d40 <app_init+0x154>)
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	213f      	movs	r1, #63	; 0x3f
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fd74 	bl	800476c <sniprintf>
 8003c84:	4603      	mov	r3, r0
 8003c86:	4a2a      	ldr	r2, [pc, #168]	; (8003d30 <app_init+0x144>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <app_init+0x13c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f868 	bl	8003d64 <logger_log_print_>
 8003c94:	f7ff fd0e 	bl	80036b4 <vPortExitCritical>

	/* Add threads, ... */
    BaseType_t ret;

    /* Task A thread at priority 1 */
    ret = xTaskCreate(task_a,							/* Pointer to the function thats implement the task. */
 8003c98:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <app_init+0x158>)
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ca6:	4928      	ldr	r1, [pc, #160]	; (8003d48 <app_init+0x15c>)
 8003ca8:	4828      	ldr	r0, [pc, #160]	; (8003d4c <app_init+0x160>)
 8003caa:	f7fe ff3e 	bl	8002b2a <xTaskCreate>
 8003cae:	60f8      	str	r0, [r7, #12]
					  NULL,								/* We are not using the task parameter. */
					  (tskIDLE_PRIORITY + 1UL),			/* This task will run at priority 1. */
					  &task_a_h);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(ret == pdPASS);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d00a      	beq.n	8003ccc <app_init+0xe0>
	__asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	60bb      	str	r3, [r7, #8]
}
 8003cc8:	bf00      	nop
 8003cca:	e7fe      	b.n	8003cca <app_init+0xde>

    /* Task B thread at priority 1 */
    ret = xTaskCreate(task_b,							/* Pointer to the function thats implement the task. */
 8003ccc:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <app_init+0x164>)
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cda:	491e      	ldr	r1, [pc, #120]	; (8003d54 <app_init+0x168>)
 8003cdc:	481e      	ldr	r0, [pc, #120]	; (8003d58 <app_init+0x16c>)
 8003cde:	f7fe ff24 	bl	8002b2a <xTaskCreate>
 8003ce2:	60f8      	str	r0, [r7, #12]
					  NULL,								/* We are not using the task parameter. */
					  (tskIDLE_PRIORITY + 1UL),			/* This task will run at priority 1. */
					  &task_b_h);						/* We are using a variable as task handle. */

    /* Check the thread was created successfully. */
    configASSERT(ret == pdPASS);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d00a      	beq.n	8003d00 <app_init+0x114>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	607b      	str	r3, [r7, #4]
}
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <app_init+0x112>

	cycle_counter_init();
 8003d00:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <app_init+0x170>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4a15      	ldr	r2, [pc, #84]	; (8003d5c <app_init+0x170>)
 8003d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d0a:	60d3      	str	r3, [r2, #12]
 8003d0c:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <app_init+0x174>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <app_init+0x174>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <app_init+0x174>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	6013      	str	r3, [r2, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd90      	pop	{r4, r7, pc}
 8003d26:	bf00      	nop
 8003d28:	0800586c 	.word	0x0800586c
 8003d2c:	08005748 	.word	0x08005748
 8003d30:	20004188 	.word	0x20004188
 8003d34:	0800574c 	.word	0x0800574c
 8003d38:	08005758 	.word	0x08005758
 8003d3c:	20000010 	.word	0x20000010
 8003d40:	20000014 	.word	0x20000014
 8003d44:	20004140 	.word	0x20004140
 8003d48:	0800577c 	.word	0x0800577c
 8003d4c:	08003d8d 	.word	0x08003d8d
 8003d50:	20004144 	.word	0x20004144
 8003d54:	08005784 	.word	0x08005784
 8003d58:	08003e45 	.word	0x08003e45
 8003d5c:	e000edf0 	.word	0xe000edf0
 8003d60:	e0001000 	.word	0xe0001000

08003d64 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	printf(msg);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fceb 	bl	8004748 <iprintf>
	fflush(stdout);
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <logger_log_print_+0x24>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fc0f 	bl	800459c <fflush>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000080 	.word	0x20000080

08003d8c <task_a>:
uint32_t g_task_a_cnt;

/********************** external functions definition ************************/
/* Task A thread */
void task_a(void *parameters)
{
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	6078      	str	r0, [r7, #4]
	#if (TEST_X == 0)

	uint32_t task_a_cnt;
	g_task_a_cnt = G_TASK_A_CNT_INI;
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <task_a+0x98>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
	{

		#if (TEST_X == 0)

		/* Update Task A Counter */
		g_task_a_cnt++;
 8003d9a:	4b22      	ldr	r3, [pc, #136]	; (8003e24 <task_a+0x98>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	4a20      	ldr	r2, [pc, #128]	; (8003e24 <task_a+0x98>)
 8003da2:	6013      	str	r3, [r2, #0]

		/* Print out: Application Update */
		LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_a), p_task_a);
 8003da4:	f7ff fc56 	bl	8003654 <vPortEnterCritical>
 8003da8:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <task_a+0x9c>)
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	4b1f      	ldr	r3, [pc, #124]	; (8003e2c <task_a+0xa0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <task_a+0xa4>)
 8003db4:	4a1f      	ldr	r2, [pc, #124]	; (8003e34 <task_a+0xa8>)
 8003db6:	213f      	movs	r1, #63	; 0x3f
 8003db8:	f000 fcd8 	bl	800476c <sniprintf>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <task_a+0xac>)
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <task_a+0x9c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff ffcc 	bl	8003d64 <logger_log_print_>
 8003dcc:	f7ff fc72 	bl	80036b4 <vPortExitCritical>

		/* Print out: Task execution counter */
		LOGGER_LOG("   Tick [mS] = %d - %s = %d\r\n", (int)xTaskGetTickCount(), GET_NAME(g_task_a_cnt), (int)g_task_a_cnt);
 8003dd0:	f7ff fc40 	bl	8003654 <vPortEnterCritical>
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <task_a+0x9c>)
 8003dd6:	681c      	ldr	r4, [r3, #0]
 8003dd8:	f7ff f8f8 	bl	8002fcc <xTaskGetTickCount>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	461a      	mov	r2, r3
 8003de0:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <task_a+0x98>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	4b15      	ldr	r3, [pc, #84]	; (8003e3c <task_a+0xb0>)
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	4613      	mov	r3, r2
 8003dec:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <task_a+0xb4>)
 8003dee:	213f      	movs	r1, #63	; 0x3f
 8003df0:	4620      	mov	r0, r4
 8003df2:	f000 fcbb 	bl	800476c <sniprintf>
 8003df6:	4603      	mov	r3, r0
 8003df8:	4a0f      	ldr	r2, [pc, #60]	; (8003e38 <task_a+0xac>)
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <task_a+0x9c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ffaf 	bl	8003d64 <logger_log_print_>
 8003e06:	f7ff fc55 	bl	80036b4 <vPortExitCritical>

		for (task_a_cnt = TASK_A_CNT_INI; task_a_cnt < TASK_A_CNT_MAX; task_a_cnt++);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e002      	b.n	8003e16 <task_a+0x8a>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d9f7      	bls.n	8003e10 <task_a+0x84>
		g_task_a_cnt++;
 8003e20:	e7bb      	b.n	8003d9a <task_a+0xe>
 8003e22:	bf00      	nop
 8003e24:	2000418c 	.word	0x2000418c
 8003e28:	0800586c 	.word	0x0800586c
 8003e2c:	20000018 	.word	0x20000018
 8003e30:	080057a0 	.word	0x080057a0
 8003e34:	080057a8 	.word	0x080057a8
 8003e38:	20004188 	.word	0x20004188
 8003e3c:	080057e0 	.word	0x080057e0
 8003e40:	080057c0 	.word	0x080057c0

08003e44 <task_b>:
uint32_t g_task_b_cnt;

/********************** external functions definition ************************/
/* Task B thread */
void task_b(void *parameters)
{
 8003e44:	b590      	push	{r4, r7, lr}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	6078      	str	r0, [r7, #4]
	#if (TEST_X == 0)

	uint32_t task_b_cnt;
	g_task_b_cnt = G_TASK_B_CNT_INI;
 8003e4c:	4b23      	ldr	r3, [pc, #140]	; (8003edc <task_b+0x98>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
	for (;;)
    {
		#if (TEST_X == 0)

		/* Update Task B Counter */
		g_task_b_cnt++;
 8003e52:	4b22      	ldr	r3, [pc, #136]	; (8003edc <task_b+0x98>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3301      	adds	r3, #1
 8003e58:	4a20      	ldr	r2, [pc, #128]	; (8003edc <task_b+0x98>)
 8003e5a:	6013      	str	r3, [r2, #0]

		/* Print out: Application Update */
		LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_b), p_task_b);
 8003e5c:	f7ff fbfa 	bl	8003654 <vPortEnterCritical>
 8003e60:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <task_b+0x9c>)
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	4b1f      	ldr	r3, [pc, #124]	; (8003ee4 <task_b+0xa0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <task_b+0xa4>)
 8003e6c:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <task_b+0xa8>)
 8003e6e:	213f      	movs	r1, #63	; 0x3f
 8003e70:	f000 fc7c 	bl	800476c <sniprintf>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4a1e      	ldr	r2, [pc, #120]	; (8003ef0 <task_b+0xac>)
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <task_b+0x9c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ff70 	bl	8003d64 <logger_log_print_>
 8003e84:	f7ff fc16 	bl	80036b4 <vPortExitCritical>

		/* Print out: Task execution counter */
		LOGGER_LOG("   Tick [mS] = %d - %s = %d\r\n", (int)xTaskGetTickCount(), GET_NAME(g_task_b_cnt), (int)g_task_b_cnt);
 8003e88:	f7ff fbe4 	bl	8003654 <vPortEnterCritical>
 8003e8c:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <task_b+0x9c>)
 8003e8e:	681c      	ldr	r4, [r3, #0]
 8003e90:	f7ff f89c 	bl	8002fcc <xTaskGetTickCount>
 8003e94:	4603      	mov	r3, r0
 8003e96:	461a      	mov	r2, r3
 8003e98:	4b10      	ldr	r3, [pc, #64]	; (8003edc <task_b+0x98>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <task_b+0xb0>)
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <task_b+0xb4>)
 8003ea6:	213f      	movs	r1, #63	; 0x3f
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f000 fc5f 	bl	800476c <sniprintf>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4a0f      	ldr	r2, [pc, #60]	; (8003ef0 <task_b+0xac>)
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <task_b+0x9c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff53 	bl	8003d64 <logger_log_print_>
 8003ebe:	f7ff fbf9 	bl	80036b4 <vPortExitCritical>

		for (task_b_cnt = TASK_B_CNT_INI; task_b_cnt < TASK_B_CNT_MAX; task_b_cnt++);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e002      	b.n	8003ece <task_b+0x8a>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f242 720f 	movw	r2, #9999	; 0x270f
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d9f7      	bls.n	8003ec8 <task_b+0x84>
		g_task_b_cnt++;
 8003ed8:	e7bb      	b.n	8003e52 <task_b+0xe>
 8003eda:	bf00      	nop
 8003edc:	20004190 	.word	0x20004190
 8003ee0:	0800586c 	.word	0x0800586c
 8003ee4:	2000001c 	.word	0x2000001c
 8003ee8:	08005804 	.word	0x08005804
 8003eec:	0800580c 	.word	0x0800580c
 8003ef0:	20004188 	.word	0x20004188
 8003ef4:	08005844 	.word	0x08005844
 8003ef8:	08005824 	.word	0x08005824

08003efc <findslot>:
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <findslot+0x2c>)
 8003efe:	b510      	push	{r4, lr}
 8003f00:	4604      	mov	r4, r0
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	b118      	cbz	r0, 8003f0e <findslot+0x12>
 8003f06:	6a03      	ldr	r3, [r0, #32]
 8003f08:	b90b      	cbnz	r3, 8003f0e <findslot+0x12>
 8003f0a:	f000 fbe7 	bl	80046dc <__sinit>
 8003f0e:	2c13      	cmp	r4, #19
 8003f10:	d807      	bhi.n	8003f22 <findslot+0x26>
 8003f12:	4806      	ldr	r0, [pc, #24]	; (8003f2c <findslot+0x30>)
 8003f14:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003f18:	3201      	adds	r2, #1
 8003f1a:	d002      	beq.n	8003f22 <findslot+0x26>
 8003f1c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003f20:	bd10      	pop	{r4, pc}
 8003f22:	2000      	movs	r0, #0
 8003f24:	e7fc      	b.n	8003f20 <findslot+0x24>
 8003f26:	bf00      	nop
 8003f28:	20000080 	.word	0x20000080
 8003f2c:	200041a0 	.word	0x200041a0

08003f30 <error>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	4604      	mov	r4, r0
 8003f34:	f000 fce0 	bl	80048f8 <__errno>
 8003f38:	2613      	movs	r6, #19
 8003f3a:	4605      	mov	r5, r0
 8003f3c:	2700      	movs	r7, #0
 8003f3e:	4630      	mov	r0, r6
 8003f40:	4639      	mov	r1, r7
 8003f42:	beab      	bkpt	0x00ab
 8003f44:	4606      	mov	r6, r0
 8003f46:	602e      	str	r6, [r5, #0]
 8003f48:	4620      	mov	r0, r4
 8003f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003f4c <checkerror>:
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d101      	bne.n	8003f54 <checkerror+0x8>
 8003f50:	f7ff bfee 	b.w	8003f30 <error>
 8003f54:	4770      	bx	lr

08003f56 <_swiread>:
 8003f56:	b530      	push	{r4, r5, lr}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003f5e:	9203      	str	r2, [sp, #12]
 8003f60:	2406      	movs	r4, #6
 8003f62:	ad01      	add	r5, sp, #4
 8003f64:	4620      	mov	r0, r4
 8003f66:	4629      	mov	r1, r5
 8003f68:	beab      	bkpt	0x00ab
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7ff ffed 	bl	8003f4c <checkerror>
 8003f72:	b005      	add	sp, #20
 8003f74:	bd30      	pop	{r4, r5, pc}

08003f76 <_read>:
 8003f76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f78:	4615      	mov	r5, r2
 8003f7a:	9101      	str	r1, [sp, #4]
 8003f7c:	f7ff ffbe 	bl	8003efc <findslot>
 8003f80:	9901      	ldr	r1, [sp, #4]
 8003f82:	4604      	mov	r4, r0
 8003f84:	b938      	cbnz	r0, 8003f96 <_read+0x20>
 8003f86:	f000 fcb7 	bl	80048f8 <__errno>
 8003f8a:	2309      	movs	r3, #9
 8003f8c:	6003      	str	r3, [r0, #0]
 8003f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f92:	b003      	add	sp, #12
 8003f94:	bd30      	pop	{r4, r5, pc}
 8003f96:	6800      	ldr	r0, [r0, #0]
 8003f98:	462a      	mov	r2, r5
 8003f9a:	f7ff ffdc 	bl	8003f56 <_swiread>
 8003f9e:	1c43      	adds	r3, r0, #1
 8003fa0:	d0f7      	beq.n	8003f92 <_read+0x1c>
 8003fa2:	6863      	ldr	r3, [r4, #4]
 8003fa4:	1a2a      	subs	r2, r5, r0
 8003fa6:	4413      	add	r3, r2
 8003fa8:	6063      	str	r3, [r4, #4]
 8003faa:	4610      	mov	r0, r2
 8003fac:	e7f1      	b.n	8003f92 <_read+0x1c>

08003fae <_swilseek>:
 8003fae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	4616      	mov	r6, r2
 8003fb4:	f7ff ffa2 	bl	8003efc <findslot>
 8003fb8:	4605      	mov	r5, r0
 8003fba:	b940      	cbnz	r0, 8003fce <_swilseek+0x20>
 8003fbc:	f000 fc9c 	bl	80048f8 <__errno>
 8003fc0:	2309      	movs	r3, #9
 8003fc2:	6003      	str	r3, [r0, #0]
 8003fc4:	f04f 34ff 	mov.w	r4, #4294967295
 8003fc8:	4620      	mov	r0, r4
 8003fca:	b003      	add	sp, #12
 8003fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fce:	2e02      	cmp	r6, #2
 8003fd0:	d903      	bls.n	8003fda <_swilseek+0x2c>
 8003fd2:	f000 fc91 	bl	80048f8 <__errno>
 8003fd6:	2316      	movs	r3, #22
 8003fd8:	e7f3      	b.n	8003fc2 <_swilseek+0x14>
 8003fda:	2e01      	cmp	r6, #1
 8003fdc:	d112      	bne.n	8004004 <_swilseek+0x56>
 8003fde:	6843      	ldr	r3, [r0, #4]
 8003fe0:	18e4      	adds	r4, r4, r3
 8003fe2:	d4f6      	bmi.n	8003fd2 <_swilseek+0x24>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	260a      	movs	r6, #10
 8003fe8:	e9cd 3400 	strd	r3, r4, [sp]
 8003fec:	466f      	mov	r7, sp
 8003fee:	4630      	mov	r0, r6
 8003ff0:	4639      	mov	r1, r7
 8003ff2:	beab      	bkpt	0x00ab
 8003ff4:	4606      	mov	r6, r0
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f7ff ffa8 	bl	8003f4c <checkerror>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	dbe1      	blt.n	8003fc4 <_swilseek+0x16>
 8004000:	606c      	str	r4, [r5, #4]
 8004002:	e7e1      	b.n	8003fc8 <_swilseek+0x1a>
 8004004:	2e02      	cmp	r6, #2
 8004006:	6803      	ldr	r3, [r0, #0]
 8004008:	d1ec      	bne.n	8003fe4 <_swilseek+0x36>
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	260c      	movs	r6, #12
 800400e:	466f      	mov	r7, sp
 8004010:	4630      	mov	r0, r6
 8004012:	4639      	mov	r1, r7
 8004014:	beab      	bkpt	0x00ab
 8004016:	4606      	mov	r6, r0
 8004018:	4630      	mov	r0, r6
 800401a:	f7ff ff97 	bl	8003f4c <checkerror>
 800401e:	1c43      	adds	r3, r0, #1
 8004020:	d0d0      	beq.n	8003fc4 <_swilseek+0x16>
 8004022:	4404      	add	r4, r0
 8004024:	e7de      	b.n	8003fe4 <_swilseek+0x36>

08004026 <_lseek>:
 8004026:	f7ff bfc2 	b.w	8003fae <_swilseek>

0800402a <_swiwrite>:
 800402a:	b530      	push	{r4, r5, lr}
 800402c:	b085      	sub	sp, #20
 800402e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004032:	9203      	str	r2, [sp, #12]
 8004034:	2405      	movs	r4, #5
 8004036:	ad01      	add	r5, sp, #4
 8004038:	4620      	mov	r0, r4
 800403a:	4629      	mov	r1, r5
 800403c:	beab      	bkpt	0x00ab
 800403e:	4604      	mov	r4, r0
 8004040:	4620      	mov	r0, r4
 8004042:	f7ff ff83 	bl	8003f4c <checkerror>
 8004046:	b005      	add	sp, #20
 8004048:	bd30      	pop	{r4, r5, pc}

0800404a <_write>:
 800404a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800404c:	4615      	mov	r5, r2
 800404e:	9101      	str	r1, [sp, #4]
 8004050:	f7ff ff54 	bl	8003efc <findslot>
 8004054:	9901      	ldr	r1, [sp, #4]
 8004056:	4604      	mov	r4, r0
 8004058:	b930      	cbnz	r0, 8004068 <_write+0x1e>
 800405a:	f000 fc4d 	bl	80048f8 <__errno>
 800405e:	2309      	movs	r3, #9
 8004060:	6003      	str	r3, [r0, #0]
 8004062:	f04f 30ff 	mov.w	r0, #4294967295
 8004066:	e012      	b.n	800408e <_write+0x44>
 8004068:	6800      	ldr	r0, [r0, #0]
 800406a:	462a      	mov	r2, r5
 800406c:	f7ff ffdd 	bl	800402a <_swiwrite>
 8004070:	2800      	cmp	r0, #0
 8004072:	dbf6      	blt.n	8004062 <_write+0x18>
 8004074:	6862      	ldr	r2, [r4, #4]
 8004076:	1a2b      	subs	r3, r5, r0
 8004078:	441a      	add	r2, r3
 800407a:	42a8      	cmp	r0, r5
 800407c:	6062      	str	r2, [r4, #4]
 800407e:	d105      	bne.n	800408c <_write+0x42>
 8004080:	2000      	movs	r0, #0
 8004082:	b003      	add	sp, #12
 8004084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004088:	f7ff bf52 	b.w	8003f30 <error>
 800408c:	4618      	mov	r0, r3
 800408e:	b003      	add	sp, #12
 8004090:	bd30      	pop	{r4, r5, pc}

08004092 <_swiclose>:
 8004092:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004094:	2402      	movs	r4, #2
 8004096:	9001      	str	r0, [sp, #4]
 8004098:	ad01      	add	r5, sp, #4
 800409a:	4620      	mov	r0, r4
 800409c:	4629      	mov	r1, r5
 800409e:	beab      	bkpt	0x00ab
 80040a0:	4604      	mov	r4, r0
 80040a2:	4620      	mov	r0, r4
 80040a4:	f7ff ff52 	bl	8003f4c <checkerror>
 80040a8:	b003      	add	sp, #12
 80040aa:	bd30      	pop	{r4, r5, pc}

080040ac <_close>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4605      	mov	r5, r0
 80040b0:	f7ff ff24 	bl	8003efc <findslot>
 80040b4:	4604      	mov	r4, r0
 80040b6:	b930      	cbnz	r0, 80040c6 <_close+0x1a>
 80040b8:	f000 fc1e 	bl	80048f8 <__errno>
 80040bc:	2309      	movs	r3, #9
 80040be:	6003      	str	r3, [r0, #0]
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	bd38      	pop	{r3, r4, r5, pc}
 80040c6:	3d01      	subs	r5, #1
 80040c8:	2d01      	cmp	r5, #1
 80040ca:	d809      	bhi.n	80040e0 <_close+0x34>
 80040cc:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <_close+0x48>)
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d104      	bne.n	80040e0 <_close+0x34>
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295
 80040da:	6003      	str	r3, [r0, #0]
 80040dc:	2000      	movs	r0, #0
 80040de:	e7f1      	b.n	80040c4 <_close+0x18>
 80040e0:	6820      	ldr	r0, [r4, #0]
 80040e2:	f7ff ffd6 	bl	8004092 <_swiclose>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	d1ec      	bne.n	80040c4 <_close+0x18>
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	6023      	str	r3, [r4, #0]
 80040f0:	e7e8      	b.n	80040c4 <_close+0x18>
 80040f2:	bf00      	nop
 80040f4:	200041a0 	.word	0x200041a0

080040f8 <_swistat>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	460c      	mov	r4, r1
 80040fc:	f7ff fefe 	bl	8003efc <findslot>
 8004100:	4605      	mov	r5, r0
 8004102:	b930      	cbnz	r0, 8004112 <_swistat+0x1a>
 8004104:	f000 fbf8 	bl	80048f8 <__errno>
 8004108:	2309      	movs	r3, #9
 800410a:	6003      	str	r3, [r0, #0]
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	bd70      	pop	{r4, r5, r6, pc}
 8004112:	6863      	ldr	r3, [r4, #4]
 8004114:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004118:	6063      	str	r3, [r4, #4]
 800411a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800411e:	64a3      	str	r3, [r4, #72]	; 0x48
 8004120:	260c      	movs	r6, #12
 8004122:	4630      	mov	r0, r6
 8004124:	4629      	mov	r1, r5
 8004126:	beab      	bkpt	0x00ab
 8004128:	4605      	mov	r5, r0
 800412a:	4628      	mov	r0, r5
 800412c:	f7ff ff0e 	bl	8003f4c <checkerror>
 8004130:	1c43      	adds	r3, r0, #1
 8004132:	bf1c      	itt	ne
 8004134:	6120      	strne	r0, [r4, #16]
 8004136:	2000      	movne	r0, #0
 8004138:	e7ea      	b.n	8004110 <_swistat+0x18>

0800413a <_fstat>:
 800413a:	460b      	mov	r3, r1
 800413c:	b510      	push	{r4, lr}
 800413e:	2100      	movs	r1, #0
 8004140:	4604      	mov	r4, r0
 8004142:	2258      	movs	r2, #88	; 0x58
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fb88 	bl	800485a <memset>
 800414a:	4601      	mov	r1, r0
 800414c:	4620      	mov	r0, r4
 800414e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004152:	f7ff bfd1 	b.w	80040f8 <_swistat>

08004156 <_stat>:
 8004156:	b538      	push	{r3, r4, r5, lr}
 8004158:	460d      	mov	r5, r1
 800415a:	4604      	mov	r4, r0
 800415c:	2258      	movs	r2, #88	; 0x58
 800415e:	2100      	movs	r1, #0
 8004160:	4628      	mov	r0, r5
 8004162:	f000 fb7a 	bl	800485a <memset>
 8004166:	4620      	mov	r0, r4
 8004168:	2100      	movs	r1, #0
 800416a:	f000 f811 	bl	8004190 <_swiopen>
 800416e:	1c43      	adds	r3, r0, #1
 8004170:	4604      	mov	r4, r0
 8004172:	d00b      	beq.n	800418c <_stat+0x36>
 8004174:	686b      	ldr	r3, [r5, #4]
 8004176:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800417a:	606b      	str	r3, [r5, #4]
 800417c:	4629      	mov	r1, r5
 800417e:	f7ff ffbb 	bl	80040f8 <_swistat>
 8004182:	4605      	mov	r5, r0
 8004184:	4620      	mov	r0, r4
 8004186:	f7ff ff91 	bl	80040ac <_close>
 800418a:	462c      	mov	r4, r5
 800418c:	4620      	mov	r0, r4
 800418e:	bd38      	pop	{r3, r4, r5, pc}

08004190 <_swiopen>:
 8004190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004194:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004240 <_swiopen+0xb0>
 8004198:	b097      	sub	sp, #92	; 0x5c
 800419a:	4607      	mov	r7, r0
 800419c:	460e      	mov	r6, r1
 800419e:	2500      	movs	r5, #0
 80041a0:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80041a4:	1c61      	adds	r1, r4, #1
 80041a6:	d037      	beq.n	8004218 <_swiopen+0x88>
 80041a8:	3501      	adds	r5, #1
 80041aa:	2d14      	cmp	r5, #20
 80041ac:	d1f8      	bne.n	80041a0 <_swiopen+0x10>
 80041ae:	f000 fba3 	bl	80048f8 <__errno>
 80041b2:	2318      	movs	r3, #24
 80041b4:	6003      	str	r3, [r0, #0]
 80041b6:	f04f 34ff 	mov.w	r4, #4294967295
 80041ba:	e03d      	b.n	8004238 <_swiopen+0xa8>
 80041bc:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80041c0:	f240 6301 	movw	r3, #1537	; 0x601
 80041c4:	07b2      	lsls	r2, r6, #30
 80041c6:	bf48      	it	mi
 80041c8:	f044 0402 	orrmi.w	r4, r4, #2
 80041cc:	421e      	tst	r6, r3
 80041ce:	bf18      	it	ne
 80041d0:	f044 0404 	orrne.w	r4, r4, #4
 80041d4:	0733      	lsls	r3, r6, #28
 80041d6:	bf48      	it	mi
 80041d8:	f024 0404 	bicmi.w	r4, r4, #4
 80041dc:	4638      	mov	r0, r7
 80041de:	bf48      	it	mi
 80041e0:	f044 0408 	orrmi.w	r4, r4, #8
 80041e4:	9700      	str	r7, [sp, #0]
 80041e6:	f7fb fffb 	bl	80001e0 <strlen>
 80041ea:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80041ee:	2401      	movs	r4, #1
 80041f0:	4620      	mov	r0, r4
 80041f2:	4649      	mov	r1, r9
 80041f4:	beab      	bkpt	0x00ab
 80041f6:	4604      	mov	r4, r0
 80041f8:	2c00      	cmp	r4, #0
 80041fa:	db08      	blt.n	800420e <_swiopen+0x7e>
 80041fc:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8004200:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8004204:	2300      	movs	r3, #0
 8004206:	f8c8 3004 	str.w	r3, [r8, #4]
 800420a:	462c      	mov	r4, r5
 800420c:	e014      	b.n	8004238 <_swiopen+0xa8>
 800420e:	4620      	mov	r0, r4
 8004210:	f7ff fe8e 	bl	8003f30 <error>
 8004214:	4604      	mov	r4, r0
 8004216:	e00f      	b.n	8004238 <_swiopen+0xa8>
 8004218:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800421c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004220:	46e9      	mov	r9, sp
 8004222:	d1cb      	bne.n	80041bc <_swiopen+0x2c>
 8004224:	4649      	mov	r1, r9
 8004226:	4638      	mov	r0, r7
 8004228:	f7ff ff95 	bl	8004156 <_stat>
 800422c:	3001      	adds	r0, #1
 800422e:	d0c5      	beq.n	80041bc <_swiopen+0x2c>
 8004230:	f000 fb62 	bl	80048f8 <__errno>
 8004234:	2311      	movs	r3, #17
 8004236:	6003      	str	r3, [r0, #0]
 8004238:	4620      	mov	r0, r4
 800423a:	b017      	add	sp, #92	; 0x5c
 800423c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004240:	200041a0 	.word	0x200041a0

08004244 <_get_semihosting_exts>:
 8004244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004248:	4606      	mov	r6, r0
 800424a:	460f      	mov	r7, r1
 800424c:	482a      	ldr	r0, [pc, #168]	; (80042f8 <_get_semihosting_exts+0xb4>)
 800424e:	2100      	movs	r1, #0
 8004250:	4615      	mov	r5, r2
 8004252:	f7ff ff9d 	bl	8004190 <_swiopen>
 8004256:	462a      	mov	r2, r5
 8004258:	4604      	mov	r4, r0
 800425a:	2100      	movs	r1, #0
 800425c:	4630      	mov	r0, r6
 800425e:	f000 fafc 	bl	800485a <memset>
 8004262:	1c63      	adds	r3, r4, #1
 8004264:	d016      	beq.n	8004294 <_get_semihosting_exts+0x50>
 8004266:	4620      	mov	r0, r4
 8004268:	f7ff fe48 	bl	8003efc <findslot>
 800426c:	f04f 080c 	mov.w	r8, #12
 8004270:	4681      	mov	r9, r0
 8004272:	4640      	mov	r0, r8
 8004274:	4649      	mov	r1, r9
 8004276:	beab      	bkpt	0x00ab
 8004278:	4680      	mov	r8, r0
 800427a:	4640      	mov	r0, r8
 800427c:	f7ff fe66 	bl	8003f4c <checkerror>
 8004280:	2803      	cmp	r0, #3
 8004282:	dd02      	ble.n	800428a <_get_semihosting_exts+0x46>
 8004284:	1ec3      	subs	r3, r0, #3
 8004286:	42ab      	cmp	r3, r5
 8004288:	dc08      	bgt.n	800429c <_get_semihosting_exts+0x58>
 800428a:	4620      	mov	r0, r4
 800428c:	f7ff ff0e 	bl	80040ac <_close>
 8004290:	f04f 34ff 	mov.w	r4, #4294967295
 8004294:	4620      	mov	r0, r4
 8004296:	b003      	add	sp, #12
 8004298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800429c:	2204      	movs	r2, #4
 800429e:	eb0d 0102 	add.w	r1, sp, r2
 80042a2:	4620      	mov	r0, r4
 80042a4:	f7ff fe67 	bl	8003f76 <_read>
 80042a8:	2803      	cmp	r0, #3
 80042aa:	ddee      	ble.n	800428a <_get_semihosting_exts+0x46>
 80042ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80042b0:	2b53      	cmp	r3, #83	; 0x53
 80042b2:	d1ea      	bne.n	800428a <_get_semihosting_exts+0x46>
 80042b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80042b8:	2b48      	cmp	r3, #72	; 0x48
 80042ba:	d1e6      	bne.n	800428a <_get_semihosting_exts+0x46>
 80042bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80042c0:	2b46      	cmp	r3, #70	; 0x46
 80042c2:	d1e2      	bne.n	800428a <_get_semihosting_exts+0x46>
 80042c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80042c8:	2b42      	cmp	r3, #66	; 0x42
 80042ca:	d1de      	bne.n	800428a <_get_semihosting_exts+0x46>
 80042cc:	2201      	movs	r2, #1
 80042ce:	4639      	mov	r1, r7
 80042d0:	4620      	mov	r0, r4
 80042d2:	f7ff fe6c 	bl	8003fae <_swilseek>
 80042d6:	2800      	cmp	r0, #0
 80042d8:	dbd7      	blt.n	800428a <_get_semihosting_exts+0x46>
 80042da:	462a      	mov	r2, r5
 80042dc:	4631      	mov	r1, r6
 80042de:	4620      	mov	r0, r4
 80042e0:	f7ff fe49 	bl	8003f76 <_read>
 80042e4:	4605      	mov	r5, r0
 80042e6:	4620      	mov	r0, r4
 80042e8:	f7ff fee0 	bl	80040ac <_close>
 80042ec:	4628      	mov	r0, r5
 80042ee:	f7ff fe2d 	bl	8003f4c <checkerror>
 80042f2:	4604      	mov	r4, r0
 80042f4:	e7ce      	b.n	8004294 <_get_semihosting_exts+0x50>
 80042f6:	bf00      	nop
 80042f8:	08005870 	.word	0x08005870

080042fc <initialise_semihosting_exts>:
 80042fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042fe:	4d0a      	ldr	r5, [pc, #40]	; (8004328 <initialise_semihosting_exts+0x2c>)
 8004300:	4c0a      	ldr	r4, [pc, #40]	; (800432c <initialise_semihosting_exts+0x30>)
 8004302:	2100      	movs	r1, #0
 8004304:	2201      	movs	r2, #1
 8004306:	a801      	add	r0, sp, #4
 8004308:	6029      	str	r1, [r5, #0]
 800430a:	6022      	str	r2, [r4, #0]
 800430c:	f7ff ff9a 	bl	8004244 <_get_semihosting_exts>
 8004310:	2800      	cmp	r0, #0
 8004312:	dd07      	ble.n	8004324 <initialise_semihosting_exts+0x28>
 8004314:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004318:	f003 0201 	and.w	r2, r3, #1
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	602a      	str	r2, [r5, #0]
 8004322:	6023      	str	r3, [r4, #0]
 8004324:	b003      	add	sp, #12
 8004326:	bd30      	pop	{r4, r5, pc}
 8004328:	20000020 	.word	0x20000020
 800432c:	20000024 	.word	0x20000024

08004330 <_has_ext_stdout_stderr>:
 8004330:	b510      	push	{r4, lr}
 8004332:	4c04      	ldr	r4, [pc, #16]	; (8004344 <_has_ext_stdout_stderr+0x14>)
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	da01      	bge.n	800433e <_has_ext_stdout_stderr+0xe>
 800433a:	f7ff ffdf 	bl	80042fc <initialise_semihosting_exts>
 800433e:	6820      	ldr	r0, [r4, #0]
 8004340:	bd10      	pop	{r4, pc}
 8004342:	bf00      	nop
 8004344:	20000024 	.word	0x20000024

08004348 <initialise_monitor_handles>:
 8004348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434c:	b085      	sub	sp, #20
 800434e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004400 <initialise_monitor_handles+0xb8>
 8004352:	f8cd 9004 	str.w	r9, [sp, #4]
 8004356:	2303      	movs	r3, #3
 8004358:	2400      	movs	r4, #0
 800435a:	9303      	str	r3, [sp, #12]
 800435c:	af01      	add	r7, sp, #4
 800435e:	9402      	str	r4, [sp, #8]
 8004360:	2501      	movs	r5, #1
 8004362:	4628      	mov	r0, r5
 8004364:	4639      	mov	r1, r7
 8004366:	beab      	bkpt	0x00ab
 8004368:	4605      	mov	r5, r0
 800436a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004404 <initialise_monitor_handles+0xbc>
 800436e:	4623      	mov	r3, r4
 8004370:	4c20      	ldr	r4, [pc, #128]	; (80043f4 <initialise_monitor_handles+0xac>)
 8004372:	f8c8 5000 	str.w	r5, [r8]
 8004376:	f04f 32ff 	mov.w	r2, #4294967295
 800437a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800437e:	3301      	adds	r3, #1
 8004380:	2b14      	cmp	r3, #20
 8004382:	d1fa      	bne.n	800437a <initialise_monitor_handles+0x32>
 8004384:	f7ff ffd4 	bl	8004330 <_has_ext_stdout_stderr>
 8004388:	4d1b      	ldr	r5, [pc, #108]	; (80043f8 <initialise_monitor_handles+0xb0>)
 800438a:	b1d0      	cbz	r0, 80043c2 <initialise_monitor_handles+0x7a>
 800438c:	f04f 0a03 	mov.w	sl, #3
 8004390:	2304      	movs	r3, #4
 8004392:	f8cd 9004 	str.w	r9, [sp, #4]
 8004396:	2601      	movs	r6, #1
 8004398:	f8cd a00c 	str.w	sl, [sp, #12]
 800439c:	9302      	str	r3, [sp, #8]
 800439e:	4630      	mov	r0, r6
 80043a0:	4639      	mov	r1, r7
 80043a2:	beab      	bkpt	0x00ab
 80043a4:	4683      	mov	fp, r0
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <initialise_monitor_handles+0xb4>)
 80043a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80043ac:	f8c3 b000 	str.w	fp, [r3]
 80043b0:	2308      	movs	r3, #8
 80043b2:	f8cd a00c 	str.w	sl, [sp, #12]
 80043b6:	9302      	str	r3, [sp, #8]
 80043b8:	4630      	mov	r0, r6
 80043ba:	4639      	mov	r1, r7
 80043bc:	beab      	bkpt	0x00ab
 80043be:	4606      	mov	r6, r0
 80043c0:	602e      	str	r6, [r5, #0]
 80043c2:	682b      	ldr	r3, [r5, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	bf02      	ittt	eq
 80043c8:	4b0c      	ldreq	r3, [pc, #48]	; (80043fc <initialise_monitor_handles+0xb4>)
 80043ca:	681b      	ldreq	r3, [r3, #0]
 80043cc:	602b      	streq	r3, [r5, #0]
 80043ce:	2600      	movs	r6, #0
 80043d0:	f8d8 3000 	ldr.w	r3, [r8]
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	6066      	str	r6, [r4, #4]
 80043d8:	f7ff ffaa 	bl	8004330 <_has_ext_stdout_stderr>
 80043dc:	b130      	cbz	r0, 80043ec <initialise_monitor_handles+0xa4>
 80043de:	4b07      	ldr	r3, [pc, #28]	; (80043fc <initialise_monitor_handles+0xb4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80043e6:	682b      	ldr	r3, [r5, #0]
 80043e8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80043ec:	b005      	add	sp, #20
 80043ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f2:	bf00      	nop
 80043f4:	200041a0 	.word	0x200041a0
 80043f8:	20004194 	.word	0x20004194
 80043fc:	2000419c 	.word	0x2000419c
 8004400:	08005886 	.word	0x08005886
 8004404:	20004198 	.word	0x20004198

08004408 <_isatty>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	f7ff fd77 	bl	8003efc <findslot>
 800440e:	2509      	movs	r5, #9
 8004410:	4604      	mov	r4, r0
 8004412:	b920      	cbnz	r0, 800441e <_isatty+0x16>
 8004414:	f000 fa70 	bl	80048f8 <__errno>
 8004418:	6005      	str	r5, [r0, #0]
 800441a:	4620      	mov	r0, r4
 800441c:	bd70      	pop	{r4, r5, r6, pc}
 800441e:	4628      	mov	r0, r5
 8004420:	4621      	mov	r1, r4
 8004422:	beab      	bkpt	0x00ab
 8004424:	4604      	mov	r4, r0
 8004426:	2c01      	cmp	r4, #1
 8004428:	d0f7      	beq.n	800441a <_isatty+0x12>
 800442a:	f000 fa65 	bl	80048f8 <__errno>
 800442e:	2400      	movs	r4, #0
 8004430:	4605      	mov	r5, r0
 8004432:	2613      	movs	r6, #19
 8004434:	4630      	mov	r0, r6
 8004436:	4621      	mov	r1, r4
 8004438:	beab      	bkpt	0x00ab
 800443a:	4606      	mov	r6, r0
 800443c:	602e      	str	r6, [r5, #0]
 800443e:	e7ec      	b.n	800441a <_isatty+0x12>

08004440 <__sflush_r>:
 8004440:	898a      	ldrh	r2, [r1, #12]
 8004442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004446:	4605      	mov	r5, r0
 8004448:	0710      	lsls	r0, r2, #28
 800444a:	460c      	mov	r4, r1
 800444c:	d458      	bmi.n	8004500 <__sflush_r+0xc0>
 800444e:	684b      	ldr	r3, [r1, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	dc05      	bgt.n	8004460 <__sflush_r+0x20>
 8004454:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	dc02      	bgt.n	8004460 <__sflush_r+0x20>
 800445a:	2000      	movs	r0, #0
 800445c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004462:	2e00      	cmp	r6, #0
 8004464:	d0f9      	beq.n	800445a <__sflush_r+0x1a>
 8004466:	2300      	movs	r3, #0
 8004468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800446c:	682f      	ldr	r7, [r5, #0]
 800446e:	6a21      	ldr	r1, [r4, #32]
 8004470:	602b      	str	r3, [r5, #0]
 8004472:	d032      	beq.n	80044da <__sflush_r+0x9a>
 8004474:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	075a      	lsls	r2, r3, #29
 800447a:	d505      	bpl.n	8004488 <__sflush_r+0x48>
 800447c:	6863      	ldr	r3, [r4, #4]
 800447e:	1ac0      	subs	r0, r0, r3
 8004480:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004482:	b10b      	cbz	r3, 8004488 <__sflush_r+0x48>
 8004484:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004486:	1ac0      	subs	r0, r0, r3
 8004488:	2300      	movs	r3, #0
 800448a:	4602      	mov	r2, r0
 800448c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800448e:	6a21      	ldr	r1, [r4, #32]
 8004490:	4628      	mov	r0, r5
 8004492:	47b0      	blx	r6
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	d106      	bne.n	80044a8 <__sflush_r+0x68>
 800449a:	6829      	ldr	r1, [r5, #0]
 800449c:	291d      	cmp	r1, #29
 800449e:	d82b      	bhi.n	80044f8 <__sflush_r+0xb8>
 80044a0:	4a29      	ldr	r2, [pc, #164]	; (8004548 <__sflush_r+0x108>)
 80044a2:	410a      	asrs	r2, r1
 80044a4:	07d6      	lsls	r6, r2, #31
 80044a6:	d427      	bmi.n	80044f8 <__sflush_r+0xb8>
 80044a8:	2200      	movs	r2, #0
 80044aa:	6062      	str	r2, [r4, #4]
 80044ac:	04d9      	lsls	r1, r3, #19
 80044ae:	6922      	ldr	r2, [r4, #16]
 80044b0:	6022      	str	r2, [r4, #0]
 80044b2:	d504      	bpl.n	80044be <__sflush_r+0x7e>
 80044b4:	1c42      	adds	r2, r0, #1
 80044b6:	d101      	bne.n	80044bc <__sflush_r+0x7c>
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	b903      	cbnz	r3, 80044be <__sflush_r+0x7e>
 80044bc:	6560      	str	r0, [r4, #84]	; 0x54
 80044be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044c0:	602f      	str	r7, [r5, #0]
 80044c2:	2900      	cmp	r1, #0
 80044c4:	d0c9      	beq.n	800445a <__sflush_r+0x1a>
 80044c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044ca:	4299      	cmp	r1, r3
 80044cc:	d002      	beq.n	80044d4 <__sflush_r+0x94>
 80044ce:	4628      	mov	r0, r5
 80044d0:	f000 fa4e 	bl	8004970 <_free_r>
 80044d4:	2000      	movs	r0, #0
 80044d6:	6360      	str	r0, [r4, #52]	; 0x34
 80044d8:	e7c0      	b.n	800445c <__sflush_r+0x1c>
 80044da:	2301      	movs	r3, #1
 80044dc:	4628      	mov	r0, r5
 80044de:	47b0      	blx	r6
 80044e0:	1c41      	adds	r1, r0, #1
 80044e2:	d1c8      	bne.n	8004476 <__sflush_r+0x36>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0c5      	beq.n	8004476 <__sflush_r+0x36>
 80044ea:	2b1d      	cmp	r3, #29
 80044ec:	d001      	beq.n	80044f2 <__sflush_r+0xb2>
 80044ee:	2b16      	cmp	r3, #22
 80044f0:	d101      	bne.n	80044f6 <__sflush_r+0xb6>
 80044f2:	602f      	str	r7, [r5, #0]
 80044f4:	e7b1      	b.n	800445a <__sflush_r+0x1a>
 80044f6:	89a3      	ldrh	r3, [r4, #12]
 80044f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044fc:	81a3      	strh	r3, [r4, #12]
 80044fe:	e7ad      	b.n	800445c <__sflush_r+0x1c>
 8004500:	690f      	ldr	r7, [r1, #16]
 8004502:	2f00      	cmp	r7, #0
 8004504:	d0a9      	beq.n	800445a <__sflush_r+0x1a>
 8004506:	0793      	lsls	r3, r2, #30
 8004508:	680e      	ldr	r6, [r1, #0]
 800450a:	bf08      	it	eq
 800450c:	694b      	ldreq	r3, [r1, #20]
 800450e:	600f      	str	r7, [r1, #0]
 8004510:	bf18      	it	ne
 8004512:	2300      	movne	r3, #0
 8004514:	eba6 0807 	sub.w	r8, r6, r7
 8004518:	608b      	str	r3, [r1, #8]
 800451a:	f1b8 0f00 	cmp.w	r8, #0
 800451e:	dd9c      	ble.n	800445a <__sflush_r+0x1a>
 8004520:	6a21      	ldr	r1, [r4, #32]
 8004522:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004524:	4643      	mov	r3, r8
 8004526:	463a      	mov	r2, r7
 8004528:	4628      	mov	r0, r5
 800452a:	47b0      	blx	r6
 800452c:	2800      	cmp	r0, #0
 800452e:	dc06      	bgt.n	800453e <__sflush_r+0xfe>
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004536:	81a3      	strh	r3, [r4, #12]
 8004538:	f04f 30ff 	mov.w	r0, #4294967295
 800453c:	e78e      	b.n	800445c <__sflush_r+0x1c>
 800453e:	4407      	add	r7, r0
 8004540:	eba8 0800 	sub.w	r8, r8, r0
 8004544:	e7e9      	b.n	800451a <__sflush_r+0xda>
 8004546:	bf00      	nop
 8004548:	dfbffffe 	.word	0xdfbffffe

0800454c <_fflush_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	690b      	ldr	r3, [r1, #16]
 8004550:	4605      	mov	r5, r0
 8004552:	460c      	mov	r4, r1
 8004554:	b913      	cbnz	r3, 800455c <_fflush_r+0x10>
 8004556:	2500      	movs	r5, #0
 8004558:	4628      	mov	r0, r5
 800455a:	bd38      	pop	{r3, r4, r5, pc}
 800455c:	b118      	cbz	r0, 8004566 <_fflush_r+0x1a>
 800455e:	6a03      	ldr	r3, [r0, #32]
 8004560:	b90b      	cbnz	r3, 8004566 <_fflush_r+0x1a>
 8004562:	f000 f8bb 	bl	80046dc <__sinit>
 8004566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f3      	beq.n	8004556 <_fflush_r+0xa>
 800456e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004570:	07d0      	lsls	r0, r2, #31
 8004572:	d404      	bmi.n	800457e <_fflush_r+0x32>
 8004574:	0599      	lsls	r1, r3, #22
 8004576:	d402      	bmi.n	800457e <_fflush_r+0x32>
 8004578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800457a:	f000 f9e8 	bl	800494e <__retarget_lock_acquire_recursive>
 800457e:	4628      	mov	r0, r5
 8004580:	4621      	mov	r1, r4
 8004582:	f7ff ff5d 	bl	8004440 <__sflush_r>
 8004586:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004588:	07da      	lsls	r2, r3, #31
 800458a:	4605      	mov	r5, r0
 800458c:	d4e4      	bmi.n	8004558 <_fflush_r+0xc>
 800458e:	89a3      	ldrh	r3, [r4, #12]
 8004590:	059b      	lsls	r3, r3, #22
 8004592:	d4e1      	bmi.n	8004558 <_fflush_r+0xc>
 8004594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004596:	f000 f9db 	bl	8004950 <__retarget_lock_release_recursive>
 800459a:	e7dd      	b.n	8004558 <_fflush_r+0xc>

0800459c <fflush>:
 800459c:	4601      	mov	r1, r0
 800459e:	b920      	cbnz	r0, 80045aa <fflush+0xe>
 80045a0:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <fflush+0x18>)
 80045a2:	4905      	ldr	r1, [pc, #20]	; (80045b8 <fflush+0x1c>)
 80045a4:	4805      	ldr	r0, [pc, #20]	; (80045bc <fflush+0x20>)
 80045a6:	f000 b8b1 	b.w	800470c <_fwalk_sglue>
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <fflush+0x24>)
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	f7ff bfcd 	b.w	800454c <_fflush_r>
 80045b2:	bf00      	nop
 80045b4:	20000028 	.word	0x20000028
 80045b8:	0800454d 	.word	0x0800454d
 80045bc:	20000034 	.word	0x20000034
 80045c0:	20000080 	.word	0x20000080

080045c4 <std>:
 80045c4:	2300      	movs	r3, #0
 80045c6:	b510      	push	{r4, lr}
 80045c8:	4604      	mov	r4, r0
 80045ca:	e9c0 3300 	strd	r3, r3, [r0]
 80045ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045d2:	6083      	str	r3, [r0, #8]
 80045d4:	8181      	strh	r1, [r0, #12]
 80045d6:	6643      	str	r3, [r0, #100]	; 0x64
 80045d8:	81c2      	strh	r2, [r0, #14]
 80045da:	6183      	str	r3, [r0, #24]
 80045dc:	4619      	mov	r1, r3
 80045de:	2208      	movs	r2, #8
 80045e0:	305c      	adds	r0, #92	; 0x5c
 80045e2:	f000 f93a 	bl	800485a <memset>
 80045e6:	4b0d      	ldr	r3, [pc, #52]	; (800461c <std+0x58>)
 80045e8:	6263      	str	r3, [r4, #36]	; 0x24
 80045ea:	4b0d      	ldr	r3, [pc, #52]	; (8004620 <std+0x5c>)
 80045ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80045ee:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <std+0x60>)
 80045f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045f2:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <std+0x64>)
 80045f4:	6323      	str	r3, [r4, #48]	; 0x30
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <std+0x68>)
 80045f8:	6224      	str	r4, [r4, #32]
 80045fa:	429c      	cmp	r4, r3
 80045fc:	d006      	beq.n	800460c <std+0x48>
 80045fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004602:	4294      	cmp	r4, r2
 8004604:	d002      	beq.n	800460c <std+0x48>
 8004606:	33d0      	adds	r3, #208	; 0xd0
 8004608:	429c      	cmp	r4, r3
 800460a:	d105      	bne.n	8004618 <std+0x54>
 800460c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004614:	f000 b99a 	b.w	800494c <__retarget_lock_init_recursive>
 8004618:	bd10      	pop	{r4, pc}
 800461a:	bf00      	nop
 800461c:	080047d5 	.word	0x080047d5
 8004620:	080047f7 	.word	0x080047f7
 8004624:	0800482f 	.word	0x0800482f
 8004628:	08004853 	.word	0x08004853
 800462c:	20004240 	.word	0x20004240

08004630 <stdio_exit_handler>:
 8004630:	4a02      	ldr	r2, [pc, #8]	; (800463c <stdio_exit_handler+0xc>)
 8004632:	4903      	ldr	r1, [pc, #12]	; (8004640 <stdio_exit_handler+0x10>)
 8004634:	4803      	ldr	r0, [pc, #12]	; (8004644 <stdio_exit_handler+0x14>)
 8004636:	f000 b869 	b.w	800470c <_fwalk_sglue>
 800463a:	bf00      	nop
 800463c:	20000028 	.word	0x20000028
 8004640:	0800454d 	.word	0x0800454d
 8004644:	20000034 	.word	0x20000034

08004648 <cleanup_stdio>:
 8004648:	6841      	ldr	r1, [r0, #4]
 800464a:	4b0c      	ldr	r3, [pc, #48]	; (800467c <cleanup_stdio+0x34>)
 800464c:	4299      	cmp	r1, r3
 800464e:	b510      	push	{r4, lr}
 8004650:	4604      	mov	r4, r0
 8004652:	d001      	beq.n	8004658 <cleanup_stdio+0x10>
 8004654:	f7ff ff7a 	bl	800454c <_fflush_r>
 8004658:	68a1      	ldr	r1, [r4, #8]
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <cleanup_stdio+0x38>)
 800465c:	4299      	cmp	r1, r3
 800465e:	d002      	beq.n	8004666 <cleanup_stdio+0x1e>
 8004660:	4620      	mov	r0, r4
 8004662:	f7ff ff73 	bl	800454c <_fflush_r>
 8004666:	68e1      	ldr	r1, [r4, #12]
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <cleanup_stdio+0x3c>)
 800466a:	4299      	cmp	r1, r3
 800466c:	d004      	beq.n	8004678 <cleanup_stdio+0x30>
 800466e:	4620      	mov	r0, r4
 8004670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004674:	f7ff bf6a 	b.w	800454c <_fflush_r>
 8004678:	bd10      	pop	{r4, pc}
 800467a:	bf00      	nop
 800467c:	20004240 	.word	0x20004240
 8004680:	200042a8 	.word	0x200042a8
 8004684:	20004310 	.word	0x20004310

08004688 <global_stdio_init.part.0>:
 8004688:	b510      	push	{r4, lr}
 800468a:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <global_stdio_init.part.0+0x30>)
 800468c:	4c0b      	ldr	r4, [pc, #44]	; (80046bc <global_stdio_init.part.0+0x34>)
 800468e:	4a0c      	ldr	r2, [pc, #48]	; (80046c0 <global_stdio_init.part.0+0x38>)
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	4620      	mov	r0, r4
 8004694:	2200      	movs	r2, #0
 8004696:	2104      	movs	r1, #4
 8004698:	f7ff ff94 	bl	80045c4 <std>
 800469c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80046a0:	2201      	movs	r2, #1
 80046a2:	2109      	movs	r1, #9
 80046a4:	f7ff ff8e 	bl	80045c4 <std>
 80046a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80046ac:	2202      	movs	r2, #2
 80046ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b2:	2112      	movs	r1, #18
 80046b4:	f7ff bf86 	b.w	80045c4 <std>
 80046b8:	20004378 	.word	0x20004378
 80046bc:	20004240 	.word	0x20004240
 80046c0:	08004631 	.word	0x08004631

080046c4 <__sfp_lock_acquire>:
 80046c4:	4801      	ldr	r0, [pc, #4]	; (80046cc <__sfp_lock_acquire+0x8>)
 80046c6:	f000 b942 	b.w	800494e <__retarget_lock_acquire_recursive>
 80046ca:	bf00      	nop
 80046cc:	20004381 	.word	0x20004381

080046d0 <__sfp_lock_release>:
 80046d0:	4801      	ldr	r0, [pc, #4]	; (80046d8 <__sfp_lock_release+0x8>)
 80046d2:	f000 b93d 	b.w	8004950 <__retarget_lock_release_recursive>
 80046d6:	bf00      	nop
 80046d8:	20004381 	.word	0x20004381

080046dc <__sinit>:
 80046dc:	b510      	push	{r4, lr}
 80046de:	4604      	mov	r4, r0
 80046e0:	f7ff fff0 	bl	80046c4 <__sfp_lock_acquire>
 80046e4:	6a23      	ldr	r3, [r4, #32]
 80046e6:	b11b      	cbz	r3, 80046f0 <__sinit+0x14>
 80046e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046ec:	f7ff bff0 	b.w	80046d0 <__sfp_lock_release>
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <__sinit+0x28>)
 80046f2:	6223      	str	r3, [r4, #32]
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <__sinit+0x2c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1f5      	bne.n	80046e8 <__sinit+0xc>
 80046fc:	f7ff ffc4 	bl	8004688 <global_stdio_init.part.0>
 8004700:	e7f2      	b.n	80046e8 <__sinit+0xc>
 8004702:	bf00      	nop
 8004704:	08004649 	.word	0x08004649
 8004708:	20004378 	.word	0x20004378

0800470c <_fwalk_sglue>:
 800470c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004710:	4607      	mov	r7, r0
 8004712:	4688      	mov	r8, r1
 8004714:	4614      	mov	r4, r2
 8004716:	2600      	movs	r6, #0
 8004718:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800471c:	f1b9 0901 	subs.w	r9, r9, #1
 8004720:	d505      	bpl.n	800472e <_fwalk_sglue+0x22>
 8004722:	6824      	ldr	r4, [r4, #0]
 8004724:	2c00      	cmp	r4, #0
 8004726:	d1f7      	bne.n	8004718 <_fwalk_sglue+0xc>
 8004728:	4630      	mov	r0, r6
 800472a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800472e:	89ab      	ldrh	r3, [r5, #12]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d907      	bls.n	8004744 <_fwalk_sglue+0x38>
 8004734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004738:	3301      	adds	r3, #1
 800473a:	d003      	beq.n	8004744 <_fwalk_sglue+0x38>
 800473c:	4629      	mov	r1, r5
 800473e:	4638      	mov	r0, r7
 8004740:	47c0      	blx	r8
 8004742:	4306      	orrs	r6, r0
 8004744:	3568      	adds	r5, #104	; 0x68
 8004746:	e7e9      	b.n	800471c <_fwalk_sglue+0x10>

08004748 <iprintf>:
 8004748:	b40f      	push	{r0, r1, r2, r3}
 800474a:	b507      	push	{r0, r1, r2, lr}
 800474c:	4906      	ldr	r1, [pc, #24]	; (8004768 <iprintf+0x20>)
 800474e:	ab04      	add	r3, sp, #16
 8004750:	6808      	ldr	r0, [r1, #0]
 8004752:	f853 2b04 	ldr.w	r2, [r3], #4
 8004756:	6881      	ldr	r1, [r0, #8]
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	f000 fb83 	bl	8004e64 <_vfiprintf_r>
 800475e:	b003      	add	sp, #12
 8004760:	f85d eb04 	ldr.w	lr, [sp], #4
 8004764:	b004      	add	sp, #16
 8004766:	4770      	bx	lr
 8004768:	20000080 	.word	0x20000080

0800476c <sniprintf>:
 800476c:	b40c      	push	{r2, r3}
 800476e:	b530      	push	{r4, r5, lr}
 8004770:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <sniprintf+0x64>)
 8004772:	1e0c      	subs	r4, r1, #0
 8004774:	681d      	ldr	r5, [r3, #0]
 8004776:	b09d      	sub	sp, #116	; 0x74
 8004778:	da08      	bge.n	800478c <sniprintf+0x20>
 800477a:	238b      	movs	r3, #139	; 0x8b
 800477c:	602b      	str	r3, [r5, #0]
 800477e:	f04f 30ff 	mov.w	r0, #4294967295
 8004782:	b01d      	add	sp, #116	; 0x74
 8004784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004788:	b002      	add	sp, #8
 800478a:	4770      	bx	lr
 800478c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004790:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004794:	bf14      	ite	ne
 8004796:	f104 33ff 	addne.w	r3, r4, #4294967295
 800479a:	4623      	moveq	r3, r4
 800479c:	9304      	str	r3, [sp, #16]
 800479e:	9307      	str	r3, [sp, #28]
 80047a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047a4:	9002      	str	r0, [sp, #8]
 80047a6:	9006      	str	r0, [sp, #24]
 80047a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80047ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80047ae:	ab21      	add	r3, sp, #132	; 0x84
 80047b0:	a902      	add	r1, sp, #8
 80047b2:	4628      	mov	r0, r5
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	f000 fa2d 	bl	8004c14 <_svfiprintf_r>
 80047ba:	1c43      	adds	r3, r0, #1
 80047bc:	bfbc      	itt	lt
 80047be:	238b      	movlt	r3, #139	; 0x8b
 80047c0:	602b      	strlt	r3, [r5, #0]
 80047c2:	2c00      	cmp	r4, #0
 80047c4:	d0dd      	beq.n	8004782 <sniprintf+0x16>
 80047c6:	9b02      	ldr	r3, [sp, #8]
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
 80047cc:	e7d9      	b.n	8004782 <sniprintf+0x16>
 80047ce:	bf00      	nop
 80047d0:	20000080 	.word	0x20000080

080047d4 <__sread>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	460c      	mov	r4, r1
 80047d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047dc:	f000 f868 	bl	80048b0 <_read_r>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	bfab      	itete	ge
 80047e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047e6:	89a3      	ldrhlt	r3, [r4, #12]
 80047e8:	181b      	addge	r3, r3, r0
 80047ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047ee:	bfac      	ite	ge
 80047f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80047f2:	81a3      	strhlt	r3, [r4, #12]
 80047f4:	bd10      	pop	{r4, pc}

080047f6 <__swrite>:
 80047f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fa:	461f      	mov	r7, r3
 80047fc:	898b      	ldrh	r3, [r1, #12]
 80047fe:	05db      	lsls	r3, r3, #23
 8004800:	4605      	mov	r5, r0
 8004802:	460c      	mov	r4, r1
 8004804:	4616      	mov	r6, r2
 8004806:	d505      	bpl.n	8004814 <__swrite+0x1e>
 8004808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800480c:	2302      	movs	r3, #2
 800480e:	2200      	movs	r2, #0
 8004810:	f000 f83c 	bl	800488c <_lseek_r>
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800481a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800481e:	81a3      	strh	r3, [r4, #12]
 8004820:	4632      	mov	r2, r6
 8004822:	463b      	mov	r3, r7
 8004824:	4628      	mov	r0, r5
 8004826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800482a:	f000 b853 	b.w	80048d4 <_write_r>

0800482e <__sseek>:
 800482e:	b510      	push	{r4, lr}
 8004830:	460c      	mov	r4, r1
 8004832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004836:	f000 f829 	bl	800488c <_lseek_r>
 800483a:	1c43      	adds	r3, r0, #1
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	bf15      	itete	ne
 8004840:	6560      	strne	r0, [r4, #84]	; 0x54
 8004842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800484a:	81a3      	strheq	r3, [r4, #12]
 800484c:	bf18      	it	ne
 800484e:	81a3      	strhne	r3, [r4, #12]
 8004850:	bd10      	pop	{r4, pc}

08004852 <__sclose>:
 8004852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004856:	f000 b809 	b.w	800486c <_close_r>

0800485a <memset>:
 800485a:	4402      	add	r2, r0
 800485c:	4603      	mov	r3, r0
 800485e:	4293      	cmp	r3, r2
 8004860:	d100      	bne.n	8004864 <memset+0xa>
 8004862:	4770      	bx	lr
 8004864:	f803 1b01 	strb.w	r1, [r3], #1
 8004868:	e7f9      	b.n	800485e <memset+0x4>
	...

0800486c <_close_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4d06      	ldr	r5, [pc, #24]	; (8004888 <_close_r+0x1c>)
 8004870:	2300      	movs	r3, #0
 8004872:	4604      	mov	r4, r0
 8004874:	4608      	mov	r0, r1
 8004876:	602b      	str	r3, [r5, #0]
 8004878:	f7ff fc18 	bl	80040ac <_close>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_close_r+0x1a>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b103      	cbz	r3, 8004886 <_close_r+0x1a>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	2000437c 	.word	0x2000437c

0800488c <_lseek_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	4d07      	ldr	r5, [pc, #28]	; (80048ac <_lseek_r+0x20>)
 8004890:	4604      	mov	r4, r0
 8004892:	4608      	mov	r0, r1
 8004894:	4611      	mov	r1, r2
 8004896:	2200      	movs	r2, #0
 8004898:	602a      	str	r2, [r5, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	f7ff fbc3 	bl	8004026 <_lseek>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <_lseek_r+0x1e>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	b103      	cbz	r3, 80048aa <_lseek_r+0x1e>
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	2000437c 	.word	0x2000437c

080048b0 <_read_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4d07      	ldr	r5, [pc, #28]	; (80048d0 <_read_r+0x20>)
 80048b4:	4604      	mov	r4, r0
 80048b6:	4608      	mov	r0, r1
 80048b8:	4611      	mov	r1, r2
 80048ba:	2200      	movs	r2, #0
 80048bc:	602a      	str	r2, [r5, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	f7ff fb59 	bl	8003f76 <_read>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d102      	bne.n	80048ce <_read_r+0x1e>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	b103      	cbz	r3, 80048ce <_read_r+0x1e>
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
 80048d0:	2000437c 	.word	0x2000437c

080048d4 <_write_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4d07      	ldr	r5, [pc, #28]	; (80048f4 <_write_r+0x20>)
 80048d8:	4604      	mov	r4, r0
 80048da:	4608      	mov	r0, r1
 80048dc:	4611      	mov	r1, r2
 80048de:	2200      	movs	r2, #0
 80048e0:	602a      	str	r2, [r5, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	f7ff fbb1 	bl	800404a <_write>
 80048e8:	1c43      	adds	r3, r0, #1
 80048ea:	d102      	bne.n	80048f2 <_write_r+0x1e>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	b103      	cbz	r3, 80048f2 <_write_r+0x1e>
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	2000437c 	.word	0x2000437c

080048f8 <__errno>:
 80048f8:	4b01      	ldr	r3, [pc, #4]	; (8004900 <__errno+0x8>)
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000080 	.word	0x20000080

08004904 <__libc_init_array>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	4d0d      	ldr	r5, [pc, #52]	; (800493c <__libc_init_array+0x38>)
 8004908:	4c0d      	ldr	r4, [pc, #52]	; (8004940 <__libc_init_array+0x3c>)
 800490a:	1b64      	subs	r4, r4, r5
 800490c:	10a4      	asrs	r4, r4, #2
 800490e:	2600      	movs	r6, #0
 8004910:	42a6      	cmp	r6, r4
 8004912:	d109      	bne.n	8004928 <__libc_init_array+0x24>
 8004914:	4d0b      	ldr	r5, [pc, #44]	; (8004944 <__libc_init_array+0x40>)
 8004916:	4c0c      	ldr	r4, [pc, #48]	; (8004948 <__libc_init_array+0x44>)
 8004918:	f000 feca 	bl	80056b0 <_init>
 800491c:	1b64      	subs	r4, r4, r5
 800491e:	10a4      	asrs	r4, r4, #2
 8004920:	2600      	movs	r6, #0
 8004922:	42a6      	cmp	r6, r4
 8004924:	d105      	bne.n	8004932 <__libc_init_array+0x2e>
 8004926:	bd70      	pop	{r4, r5, r6, pc}
 8004928:	f855 3b04 	ldr.w	r3, [r5], #4
 800492c:	4798      	blx	r3
 800492e:	3601      	adds	r6, #1
 8004930:	e7ee      	b.n	8004910 <__libc_init_array+0xc>
 8004932:	f855 3b04 	ldr.w	r3, [r5], #4
 8004936:	4798      	blx	r3
 8004938:	3601      	adds	r6, #1
 800493a:	e7f2      	b.n	8004922 <__libc_init_array+0x1e>
 800493c:	080058c8 	.word	0x080058c8
 8004940:	080058c8 	.word	0x080058c8
 8004944:	080058c8 	.word	0x080058c8
 8004948:	080058cc 	.word	0x080058cc

0800494c <__retarget_lock_init_recursive>:
 800494c:	4770      	bx	lr

0800494e <__retarget_lock_acquire_recursive>:
 800494e:	4770      	bx	lr

08004950 <__retarget_lock_release_recursive>:
 8004950:	4770      	bx	lr

08004952 <memcpy>:
 8004952:	440a      	add	r2, r1
 8004954:	4291      	cmp	r1, r2
 8004956:	f100 33ff 	add.w	r3, r0, #4294967295
 800495a:	d100      	bne.n	800495e <memcpy+0xc>
 800495c:	4770      	bx	lr
 800495e:	b510      	push	{r4, lr}
 8004960:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004968:	4291      	cmp	r1, r2
 800496a:	d1f9      	bne.n	8004960 <memcpy+0xe>
 800496c:	bd10      	pop	{r4, pc}
	...

08004970 <_free_r>:
 8004970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004972:	2900      	cmp	r1, #0
 8004974:	d044      	beq.n	8004a00 <_free_r+0x90>
 8004976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800497a:	9001      	str	r0, [sp, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	f1a1 0404 	sub.w	r4, r1, #4
 8004982:	bfb8      	it	lt
 8004984:	18e4      	addlt	r4, r4, r3
 8004986:	f000 f8df 	bl	8004b48 <__malloc_lock>
 800498a:	4a1e      	ldr	r2, [pc, #120]	; (8004a04 <_free_r+0x94>)
 800498c:	9801      	ldr	r0, [sp, #4]
 800498e:	6813      	ldr	r3, [r2, #0]
 8004990:	b933      	cbnz	r3, 80049a0 <_free_r+0x30>
 8004992:	6063      	str	r3, [r4, #4]
 8004994:	6014      	str	r4, [r2, #0]
 8004996:	b003      	add	sp, #12
 8004998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800499c:	f000 b8da 	b.w	8004b54 <__malloc_unlock>
 80049a0:	42a3      	cmp	r3, r4
 80049a2:	d908      	bls.n	80049b6 <_free_r+0x46>
 80049a4:	6825      	ldr	r5, [r4, #0]
 80049a6:	1961      	adds	r1, r4, r5
 80049a8:	428b      	cmp	r3, r1
 80049aa:	bf01      	itttt	eq
 80049ac:	6819      	ldreq	r1, [r3, #0]
 80049ae:	685b      	ldreq	r3, [r3, #4]
 80049b0:	1949      	addeq	r1, r1, r5
 80049b2:	6021      	streq	r1, [r4, #0]
 80049b4:	e7ed      	b.n	8004992 <_free_r+0x22>
 80049b6:	461a      	mov	r2, r3
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	b10b      	cbz	r3, 80049c0 <_free_r+0x50>
 80049bc:	42a3      	cmp	r3, r4
 80049be:	d9fa      	bls.n	80049b6 <_free_r+0x46>
 80049c0:	6811      	ldr	r1, [r2, #0]
 80049c2:	1855      	adds	r5, r2, r1
 80049c4:	42a5      	cmp	r5, r4
 80049c6:	d10b      	bne.n	80049e0 <_free_r+0x70>
 80049c8:	6824      	ldr	r4, [r4, #0]
 80049ca:	4421      	add	r1, r4
 80049cc:	1854      	adds	r4, r2, r1
 80049ce:	42a3      	cmp	r3, r4
 80049d0:	6011      	str	r1, [r2, #0]
 80049d2:	d1e0      	bne.n	8004996 <_free_r+0x26>
 80049d4:	681c      	ldr	r4, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	6053      	str	r3, [r2, #4]
 80049da:	440c      	add	r4, r1
 80049dc:	6014      	str	r4, [r2, #0]
 80049de:	e7da      	b.n	8004996 <_free_r+0x26>
 80049e0:	d902      	bls.n	80049e8 <_free_r+0x78>
 80049e2:	230c      	movs	r3, #12
 80049e4:	6003      	str	r3, [r0, #0]
 80049e6:	e7d6      	b.n	8004996 <_free_r+0x26>
 80049e8:	6825      	ldr	r5, [r4, #0]
 80049ea:	1961      	adds	r1, r4, r5
 80049ec:	428b      	cmp	r3, r1
 80049ee:	bf04      	itt	eq
 80049f0:	6819      	ldreq	r1, [r3, #0]
 80049f2:	685b      	ldreq	r3, [r3, #4]
 80049f4:	6063      	str	r3, [r4, #4]
 80049f6:	bf04      	itt	eq
 80049f8:	1949      	addeq	r1, r1, r5
 80049fa:	6021      	streq	r1, [r4, #0]
 80049fc:	6054      	str	r4, [r2, #4]
 80049fe:	e7ca      	b.n	8004996 <_free_r+0x26>
 8004a00:	b003      	add	sp, #12
 8004a02:	bd30      	pop	{r4, r5, pc}
 8004a04:	20004384 	.word	0x20004384

08004a08 <sbrk_aligned>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	4e0e      	ldr	r6, [pc, #56]	; (8004a44 <sbrk_aligned+0x3c>)
 8004a0c:	460c      	mov	r4, r1
 8004a0e:	6831      	ldr	r1, [r6, #0]
 8004a10:	4605      	mov	r5, r0
 8004a12:	b911      	cbnz	r1, 8004a1a <sbrk_aligned+0x12>
 8004a14:	f000 fd80 	bl	8005518 <_sbrk_r>
 8004a18:	6030      	str	r0, [r6, #0]
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f000 fd7b 	bl	8005518 <_sbrk_r>
 8004a22:	1c43      	adds	r3, r0, #1
 8004a24:	d00a      	beq.n	8004a3c <sbrk_aligned+0x34>
 8004a26:	1cc4      	adds	r4, r0, #3
 8004a28:	f024 0403 	bic.w	r4, r4, #3
 8004a2c:	42a0      	cmp	r0, r4
 8004a2e:	d007      	beq.n	8004a40 <sbrk_aligned+0x38>
 8004a30:	1a21      	subs	r1, r4, r0
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 fd70 	bl	8005518 <_sbrk_r>
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d101      	bne.n	8004a40 <sbrk_aligned+0x38>
 8004a3c:	f04f 34ff 	mov.w	r4, #4294967295
 8004a40:	4620      	mov	r0, r4
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	20004388 	.word	0x20004388

08004a48 <_malloc_r>:
 8004a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a4c:	1ccd      	adds	r5, r1, #3
 8004a4e:	f025 0503 	bic.w	r5, r5, #3
 8004a52:	3508      	adds	r5, #8
 8004a54:	2d0c      	cmp	r5, #12
 8004a56:	bf38      	it	cc
 8004a58:	250c      	movcc	r5, #12
 8004a5a:	2d00      	cmp	r5, #0
 8004a5c:	4607      	mov	r7, r0
 8004a5e:	db01      	blt.n	8004a64 <_malloc_r+0x1c>
 8004a60:	42a9      	cmp	r1, r5
 8004a62:	d905      	bls.n	8004a70 <_malloc_r+0x28>
 8004a64:	230c      	movs	r3, #12
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	2600      	movs	r6, #0
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b44 <_malloc_r+0xfc>
 8004a74:	f000 f868 	bl	8004b48 <__malloc_lock>
 8004a78:	f8d8 3000 	ldr.w	r3, [r8]
 8004a7c:	461c      	mov	r4, r3
 8004a7e:	bb5c      	cbnz	r4, 8004ad8 <_malloc_r+0x90>
 8004a80:	4629      	mov	r1, r5
 8004a82:	4638      	mov	r0, r7
 8004a84:	f7ff ffc0 	bl	8004a08 <sbrk_aligned>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	d155      	bne.n	8004b3a <_malloc_r+0xf2>
 8004a8e:	f8d8 4000 	ldr.w	r4, [r8]
 8004a92:	4626      	mov	r6, r4
 8004a94:	2e00      	cmp	r6, #0
 8004a96:	d145      	bne.n	8004b24 <_malloc_r+0xdc>
 8004a98:	2c00      	cmp	r4, #0
 8004a9a:	d048      	beq.n	8004b2e <_malloc_r+0xe6>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	eb04 0903 	add.w	r9, r4, r3
 8004aa6:	f000 fd37 	bl	8005518 <_sbrk_r>
 8004aaa:	4581      	cmp	r9, r0
 8004aac:	d13f      	bne.n	8004b2e <_malloc_r+0xe6>
 8004aae:	6821      	ldr	r1, [r4, #0]
 8004ab0:	1a6d      	subs	r5, r5, r1
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	f7ff ffa7 	bl	8004a08 <sbrk_aligned>
 8004aba:	3001      	adds	r0, #1
 8004abc:	d037      	beq.n	8004b2e <_malloc_r+0xe6>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	442b      	add	r3, r5
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d038      	beq.n	8004b3e <_malloc_r+0xf6>
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	42a2      	cmp	r2, r4
 8004ad0:	d12b      	bne.n	8004b2a <_malloc_r+0xe2>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	605a      	str	r2, [r3, #4]
 8004ad6:	e00f      	b.n	8004af8 <_malloc_r+0xb0>
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	1b52      	subs	r2, r2, r5
 8004adc:	d41f      	bmi.n	8004b1e <_malloc_r+0xd6>
 8004ade:	2a0b      	cmp	r2, #11
 8004ae0:	d917      	bls.n	8004b12 <_malloc_r+0xca>
 8004ae2:	1961      	adds	r1, r4, r5
 8004ae4:	42a3      	cmp	r3, r4
 8004ae6:	6025      	str	r5, [r4, #0]
 8004ae8:	bf18      	it	ne
 8004aea:	6059      	strne	r1, [r3, #4]
 8004aec:	6863      	ldr	r3, [r4, #4]
 8004aee:	bf08      	it	eq
 8004af0:	f8c8 1000 	streq.w	r1, [r8]
 8004af4:	5162      	str	r2, [r4, r5]
 8004af6:	604b      	str	r3, [r1, #4]
 8004af8:	4638      	mov	r0, r7
 8004afa:	f104 060b 	add.w	r6, r4, #11
 8004afe:	f000 f829 	bl	8004b54 <__malloc_unlock>
 8004b02:	f026 0607 	bic.w	r6, r6, #7
 8004b06:	1d23      	adds	r3, r4, #4
 8004b08:	1af2      	subs	r2, r6, r3
 8004b0a:	d0ae      	beq.n	8004a6a <_malloc_r+0x22>
 8004b0c:	1b9b      	subs	r3, r3, r6
 8004b0e:	50a3      	str	r3, [r4, r2]
 8004b10:	e7ab      	b.n	8004a6a <_malloc_r+0x22>
 8004b12:	42a3      	cmp	r3, r4
 8004b14:	6862      	ldr	r2, [r4, #4]
 8004b16:	d1dd      	bne.n	8004ad4 <_malloc_r+0x8c>
 8004b18:	f8c8 2000 	str.w	r2, [r8]
 8004b1c:	e7ec      	b.n	8004af8 <_malloc_r+0xb0>
 8004b1e:	4623      	mov	r3, r4
 8004b20:	6864      	ldr	r4, [r4, #4]
 8004b22:	e7ac      	b.n	8004a7e <_malloc_r+0x36>
 8004b24:	4634      	mov	r4, r6
 8004b26:	6876      	ldr	r6, [r6, #4]
 8004b28:	e7b4      	b.n	8004a94 <_malloc_r+0x4c>
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	e7cc      	b.n	8004ac8 <_malloc_r+0x80>
 8004b2e:	230c      	movs	r3, #12
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	4638      	mov	r0, r7
 8004b34:	f000 f80e 	bl	8004b54 <__malloc_unlock>
 8004b38:	e797      	b.n	8004a6a <_malloc_r+0x22>
 8004b3a:	6025      	str	r5, [r4, #0]
 8004b3c:	e7dc      	b.n	8004af8 <_malloc_r+0xb0>
 8004b3e:	605b      	str	r3, [r3, #4]
 8004b40:	deff      	udf	#255	; 0xff
 8004b42:	bf00      	nop
 8004b44:	20004384 	.word	0x20004384

08004b48 <__malloc_lock>:
 8004b48:	4801      	ldr	r0, [pc, #4]	; (8004b50 <__malloc_lock+0x8>)
 8004b4a:	f7ff bf00 	b.w	800494e <__retarget_lock_acquire_recursive>
 8004b4e:	bf00      	nop
 8004b50:	20004380 	.word	0x20004380

08004b54 <__malloc_unlock>:
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <__malloc_unlock+0x8>)
 8004b56:	f7ff befb 	b.w	8004950 <__retarget_lock_release_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	20004380 	.word	0x20004380

08004b60 <__ssputs_r>:
 8004b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b64:	688e      	ldr	r6, [r1, #8]
 8004b66:	461f      	mov	r7, r3
 8004b68:	42be      	cmp	r6, r7
 8004b6a:	680b      	ldr	r3, [r1, #0]
 8004b6c:	4682      	mov	sl, r0
 8004b6e:	460c      	mov	r4, r1
 8004b70:	4690      	mov	r8, r2
 8004b72:	d82c      	bhi.n	8004bce <__ssputs_r+0x6e>
 8004b74:	898a      	ldrh	r2, [r1, #12]
 8004b76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b7a:	d026      	beq.n	8004bca <__ssputs_r+0x6a>
 8004b7c:	6965      	ldr	r5, [r4, #20]
 8004b7e:	6909      	ldr	r1, [r1, #16]
 8004b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b84:	eba3 0901 	sub.w	r9, r3, r1
 8004b88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b8c:	1c7b      	adds	r3, r7, #1
 8004b8e:	444b      	add	r3, r9
 8004b90:	106d      	asrs	r5, r5, #1
 8004b92:	429d      	cmp	r5, r3
 8004b94:	bf38      	it	cc
 8004b96:	461d      	movcc	r5, r3
 8004b98:	0553      	lsls	r3, r2, #21
 8004b9a:	d527      	bpl.n	8004bec <__ssputs_r+0x8c>
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	f7ff ff53 	bl	8004a48 <_malloc_r>
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	b360      	cbz	r0, 8004c00 <__ssputs_r+0xa0>
 8004ba6:	6921      	ldr	r1, [r4, #16]
 8004ba8:	464a      	mov	r2, r9
 8004baa:	f7ff fed2 	bl	8004952 <memcpy>
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb8:	81a3      	strh	r3, [r4, #12]
 8004bba:	6126      	str	r6, [r4, #16]
 8004bbc:	6165      	str	r5, [r4, #20]
 8004bbe:	444e      	add	r6, r9
 8004bc0:	eba5 0509 	sub.w	r5, r5, r9
 8004bc4:	6026      	str	r6, [r4, #0]
 8004bc6:	60a5      	str	r5, [r4, #8]
 8004bc8:	463e      	mov	r6, r7
 8004bca:	42be      	cmp	r6, r7
 8004bcc:	d900      	bls.n	8004bd0 <__ssputs_r+0x70>
 8004bce:	463e      	mov	r6, r7
 8004bd0:	6820      	ldr	r0, [r4, #0]
 8004bd2:	4632      	mov	r2, r6
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	f000 fc85 	bl	80054e4 <memmove>
 8004bda:	68a3      	ldr	r3, [r4, #8]
 8004bdc:	1b9b      	subs	r3, r3, r6
 8004bde:	60a3      	str	r3, [r4, #8]
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	4433      	add	r3, r6
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	2000      	movs	r0, #0
 8004be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bec:	462a      	mov	r2, r5
 8004bee:	f000 fca3 	bl	8005538 <_realloc_r>
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	d1e0      	bne.n	8004bba <__ssputs_r+0x5a>
 8004bf8:	6921      	ldr	r1, [r4, #16]
 8004bfa:	4650      	mov	r0, sl
 8004bfc:	f7ff feb8 	bl	8004970 <_free_r>
 8004c00:	230c      	movs	r3, #12
 8004c02:	f8ca 3000 	str.w	r3, [sl]
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c12:	e7e9      	b.n	8004be8 <__ssputs_r+0x88>

08004c14 <_svfiprintf_r>:
 8004c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c18:	4698      	mov	r8, r3
 8004c1a:	898b      	ldrh	r3, [r1, #12]
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	b09d      	sub	sp, #116	; 0x74
 8004c20:	4607      	mov	r7, r0
 8004c22:	460d      	mov	r5, r1
 8004c24:	4614      	mov	r4, r2
 8004c26:	d50e      	bpl.n	8004c46 <_svfiprintf_r+0x32>
 8004c28:	690b      	ldr	r3, [r1, #16]
 8004c2a:	b963      	cbnz	r3, 8004c46 <_svfiprintf_r+0x32>
 8004c2c:	2140      	movs	r1, #64	; 0x40
 8004c2e:	f7ff ff0b 	bl	8004a48 <_malloc_r>
 8004c32:	6028      	str	r0, [r5, #0]
 8004c34:	6128      	str	r0, [r5, #16]
 8004c36:	b920      	cbnz	r0, 8004c42 <_svfiprintf_r+0x2e>
 8004c38:	230c      	movs	r3, #12
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	e0d0      	b.n	8004de4 <_svfiprintf_r+0x1d0>
 8004c42:	2340      	movs	r3, #64	; 0x40
 8004c44:	616b      	str	r3, [r5, #20]
 8004c46:	2300      	movs	r3, #0
 8004c48:	9309      	str	r3, [sp, #36]	; 0x24
 8004c4a:	2320      	movs	r3, #32
 8004c4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c54:	2330      	movs	r3, #48	; 0x30
 8004c56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004dfc <_svfiprintf_r+0x1e8>
 8004c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c5e:	f04f 0901 	mov.w	r9, #1
 8004c62:	4623      	mov	r3, r4
 8004c64:	469a      	mov	sl, r3
 8004c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c6a:	b10a      	cbz	r2, 8004c70 <_svfiprintf_r+0x5c>
 8004c6c:	2a25      	cmp	r2, #37	; 0x25
 8004c6e:	d1f9      	bne.n	8004c64 <_svfiprintf_r+0x50>
 8004c70:	ebba 0b04 	subs.w	fp, sl, r4
 8004c74:	d00b      	beq.n	8004c8e <_svfiprintf_r+0x7a>
 8004c76:	465b      	mov	r3, fp
 8004c78:	4622      	mov	r2, r4
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f7ff ff6f 	bl	8004b60 <__ssputs_r>
 8004c82:	3001      	adds	r0, #1
 8004c84:	f000 80a9 	beq.w	8004dda <_svfiprintf_r+0x1c6>
 8004c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c8a:	445a      	add	r2, fp
 8004c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80a1 	beq.w	8004dda <_svfiprintf_r+0x1c6>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ca2:	f10a 0a01 	add.w	sl, sl, #1
 8004ca6:	9304      	str	r3, [sp, #16]
 8004ca8:	9307      	str	r3, [sp, #28]
 8004caa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cae:	931a      	str	r3, [sp, #104]	; 0x68
 8004cb0:	4654      	mov	r4, sl
 8004cb2:	2205      	movs	r2, #5
 8004cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb8:	4850      	ldr	r0, [pc, #320]	; (8004dfc <_svfiprintf_r+0x1e8>)
 8004cba:	f7fb fa99 	bl	80001f0 <memchr>
 8004cbe:	9a04      	ldr	r2, [sp, #16]
 8004cc0:	b9d8      	cbnz	r0, 8004cfa <_svfiprintf_r+0xe6>
 8004cc2:	06d0      	lsls	r0, r2, #27
 8004cc4:	bf44      	itt	mi
 8004cc6:	2320      	movmi	r3, #32
 8004cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ccc:	0711      	lsls	r1, r2, #28
 8004cce:	bf44      	itt	mi
 8004cd0:	232b      	movmi	r3, #43	; 0x2b
 8004cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cda:	2b2a      	cmp	r3, #42	; 0x2a
 8004cdc:	d015      	beq.n	8004d0a <_svfiprintf_r+0xf6>
 8004cde:	9a07      	ldr	r2, [sp, #28]
 8004ce0:	4654      	mov	r4, sl
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	f04f 0c0a 	mov.w	ip, #10
 8004ce8:	4621      	mov	r1, r4
 8004cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cee:	3b30      	subs	r3, #48	; 0x30
 8004cf0:	2b09      	cmp	r3, #9
 8004cf2:	d94d      	bls.n	8004d90 <_svfiprintf_r+0x17c>
 8004cf4:	b1b0      	cbz	r0, 8004d24 <_svfiprintf_r+0x110>
 8004cf6:	9207      	str	r2, [sp, #28]
 8004cf8:	e014      	b.n	8004d24 <_svfiprintf_r+0x110>
 8004cfa:	eba0 0308 	sub.w	r3, r0, r8
 8004cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8004d02:	4313      	orrs	r3, r2
 8004d04:	9304      	str	r3, [sp, #16]
 8004d06:	46a2      	mov	sl, r4
 8004d08:	e7d2      	b.n	8004cb0 <_svfiprintf_r+0x9c>
 8004d0a:	9b03      	ldr	r3, [sp, #12]
 8004d0c:	1d19      	adds	r1, r3, #4
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	9103      	str	r1, [sp, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bfbb      	ittet	lt
 8004d16:	425b      	neglt	r3, r3
 8004d18:	f042 0202 	orrlt.w	r2, r2, #2
 8004d1c:	9307      	strge	r3, [sp, #28]
 8004d1e:	9307      	strlt	r3, [sp, #28]
 8004d20:	bfb8      	it	lt
 8004d22:	9204      	strlt	r2, [sp, #16]
 8004d24:	7823      	ldrb	r3, [r4, #0]
 8004d26:	2b2e      	cmp	r3, #46	; 0x2e
 8004d28:	d10c      	bne.n	8004d44 <_svfiprintf_r+0x130>
 8004d2a:	7863      	ldrb	r3, [r4, #1]
 8004d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d2e:	d134      	bne.n	8004d9a <_svfiprintf_r+0x186>
 8004d30:	9b03      	ldr	r3, [sp, #12]
 8004d32:	1d1a      	adds	r2, r3, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	9203      	str	r2, [sp, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bfb8      	it	lt
 8004d3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d40:	3402      	adds	r4, #2
 8004d42:	9305      	str	r3, [sp, #20]
 8004d44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004e0c <_svfiprintf_r+0x1f8>
 8004d48:	7821      	ldrb	r1, [r4, #0]
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	4650      	mov	r0, sl
 8004d4e:	f7fb fa4f 	bl	80001f0 <memchr>
 8004d52:	b138      	cbz	r0, 8004d64 <_svfiprintf_r+0x150>
 8004d54:	9b04      	ldr	r3, [sp, #16]
 8004d56:	eba0 000a 	sub.w	r0, r0, sl
 8004d5a:	2240      	movs	r2, #64	; 0x40
 8004d5c:	4082      	lsls	r2, r0
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	3401      	adds	r4, #1
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d68:	4825      	ldr	r0, [pc, #148]	; (8004e00 <_svfiprintf_r+0x1ec>)
 8004d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d6e:	2206      	movs	r2, #6
 8004d70:	f7fb fa3e 	bl	80001f0 <memchr>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d038      	beq.n	8004dea <_svfiprintf_r+0x1d6>
 8004d78:	4b22      	ldr	r3, [pc, #136]	; (8004e04 <_svfiprintf_r+0x1f0>)
 8004d7a:	bb1b      	cbnz	r3, 8004dc4 <_svfiprintf_r+0x1b0>
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	3307      	adds	r3, #7
 8004d80:	f023 0307 	bic.w	r3, r3, #7
 8004d84:	3308      	adds	r3, #8
 8004d86:	9303      	str	r3, [sp, #12]
 8004d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d8a:	4433      	add	r3, r6
 8004d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d8e:	e768      	b.n	8004c62 <_svfiprintf_r+0x4e>
 8004d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d94:	460c      	mov	r4, r1
 8004d96:	2001      	movs	r0, #1
 8004d98:	e7a6      	b.n	8004ce8 <_svfiprintf_r+0xd4>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	3401      	adds	r4, #1
 8004d9e:	9305      	str	r3, [sp, #20]
 8004da0:	4619      	mov	r1, r3
 8004da2:	f04f 0c0a 	mov.w	ip, #10
 8004da6:	4620      	mov	r0, r4
 8004da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dac:	3a30      	subs	r2, #48	; 0x30
 8004dae:	2a09      	cmp	r2, #9
 8004db0:	d903      	bls.n	8004dba <_svfiprintf_r+0x1a6>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0c6      	beq.n	8004d44 <_svfiprintf_r+0x130>
 8004db6:	9105      	str	r1, [sp, #20]
 8004db8:	e7c4      	b.n	8004d44 <_svfiprintf_r+0x130>
 8004dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e7f0      	b.n	8004da6 <_svfiprintf_r+0x192>
 8004dc4:	ab03      	add	r3, sp, #12
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	462a      	mov	r2, r5
 8004dca:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <_svfiprintf_r+0x1f4>)
 8004dcc:	a904      	add	r1, sp, #16
 8004dce:	4638      	mov	r0, r7
 8004dd0:	f3af 8000 	nop.w
 8004dd4:	1c42      	adds	r2, r0, #1
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	d1d6      	bne.n	8004d88 <_svfiprintf_r+0x174>
 8004dda:	89ab      	ldrh	r3, [r5, #12]
 8004ddc:	065b      	lsls	r3, r3, #25
 8004dde:	f53f af2d 	bmi.w	8004c3c <_svfiprintf_r+0x28>
 8004de2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de4:	b01d      	add	sp, #116	; 0x74
 8004de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dea:	ab03      	add	r3, sp, #12
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	462a      	mov	r2, r5
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <_svfiprintf_r+0x1f4>)
 8004df2:	a904      	add	r1, sp, #16
 8004df4:	4638      	mov	r0, r7
 8004df6:	f000 f9bd 	bl	8005174 <_printf_i>
 8004dfa:	e7eb      	b.n	8004dd4 <_svfiprintf_r+0x1c0>
 8004dfc:	0800588a 	.word	0x0800588a
 8004e00:	08005894 	.word	0x08005894
 8004e04:	00000000 	.word	0x00000000
 8004e08:	08004b61 	.word	0x08004b61
 8004e0c:	08005890 	.word	0x08005890

08004e10 <__sfputc_r>:
 8004e10:	6893      	ldr	r3, [r2, #8]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	b410      	push	{r4}
 8004e18:	6093      	str	r3, [r2, #8]
 8004e1a:	da08      	bge.n	8004e2e <__sfputc_r+0x1e>
 8004e1c:	6994      	ldr	r4, [r2, #24]
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	db01      	blt.n	8004e26 <__sfputc_r+0x16>
 8004e22:	290a      	cmp	r1, #10
 8004e24:	d103      	bne.n	8004e2e <__sfputc_r+0x1e>
 8004e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e2a:	f000 bac5 	b.w	80053b8 <__swbuf_r>
 8004e2e:	6813      	ldr	r3, [r2, #0]
 8004e30:	1c58      	adds	r0, r3, #1
 8004e32:	6010      	str	r0, [r2, #0]
 8004e34:	7019      	strb	r1, [r3, #0]
 8004e36:	4608      	mov	r0, r1
 8004e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <__sfputs_r>:
 8004e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e40:	4606      	mov	r6, r0
 8004e42:	460f      	mov	r7, r1
 8004e44:	4614      	mov	r4, r2
 8004e46:	18d5      	adds	r5, r2, r3
 8004e48:	42ac      	cmp	r4, r5
 8004e4a:	d101      	bne.n	8004e50 <__sfputs_r+0x12>
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	e007      	b.n	8004e60 <__sfputs_r+0x22>
 8004e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e54:	463a      	mov	r2, r7
 8004e56:	4630      	mov	r0, r6
 8004e58:	f7ff ffda 	bl	8004e10 <__sfputc_r>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d1f3      	bne.n	8004e48 <__sfputs_r+0xa>
 8004e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e64 <_vfiprintf_r>:
 8004e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	460d      	mov	r5, r1
 8004e6a:	b09d      	sub	sp, #116	; 0x74
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	4698      	mov	r8, r3
 8004e70:	4606      	mov	r6, r0
 8004e72:	b118      	cbz	r0, 8004e7c <_vfiprintf_r+0x18>
 8004e74:	6a03      	ldr	r3, [r0, #32]
 8004e76:	b90b      	cbnz	r3, 8004e7c <_vfiprintf_r+0x18>
 8004e78:	f7ff fc30 	bl	80046dc <__sinit>
 8004e7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e7e:	07d9      	lsls	r1, r3, #31
 8004e80:	d405      	bmi.n	8004e8e <_vfiprintf_r+0x2a>
 8004e82:	89ab      	ldrh	r3, [r5, #12]
 8004e84:	059a      	lsls	r2, r3, #22
 8004e86:	d402      	bmi.n	8004e8e <_vfiprintf_r+0x2a>
 8004e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e8a:	f7ff fd60 	bl	800494e <__retarget_lock_acquire_recursive>
 8004e8e:	89ab      	ldrh	r3, [r5, #12]
 8004e90:	071b      	lsls	r3, r3, #28
 8004e92:	d501      	bpl.n	8004e98 <_vfiprintf_r+0x34>
 8004e94:	692b      	ldr	r3, [r5, #16]
 8004e96:	b99b      	cbnz	r3, 8004ec0 <_vfiprintf_r+0x5c>
 8004e98:	4629      	mov	r1, r5
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f000 faca 	bl	8005434 <__swsetup_r>
 8004ea0:	b170      	cbz	r0, 8004ec0 <_vfiprintf_r+0x5c>
 8004ea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ea4:	07dc      	lsls	r4, r3, #31
 8004ea6:	d504      	bpl.n	8004eb2 <_vfiprintf_r+0x4e>
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eac:	b01d      	add	sp, #116	; 0x74
 8004eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb2:	89ab      	ldrh	r3, [r5, #12]
 8004eb4:	0598      	lsls	r0, r3, #22
 8004eb6:	d4f7      	bmi.n	8004ea8 <_vfiprintf_r+0x44>
 8004eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eba:	f7ff fd49 	bl	8004950 <__retarget_lock_release_recursive>
 8004ebe:	e7f3      	b.n	8004ea8 <_vfiprintf_r+0x44>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec4:	2320      	movs	r3, #32
 8004ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ece:	2330      	movs	r3, #48	; 0x30
 8004ed0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005084 <_vfiprintf_r+0x220>
 8004ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ed8:	f04f 0901 	mov.w	r9, #1
 8004edc:	4623      	mov	r3, r4
 8004ede:	469a      	mov	sl, r3
 8004ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ee4:	b10a      	cbz	r2, 8004eea <_vfiprintf_r+0x86>
 8004ee6:	2a25      	cmp	r2, #37	; 0x25
 8004ee8:	d1f9      	bne.n	8004ede <_vfiprintf_r+0x7a>
 8004eea:	ebba 0b04 	subs.w	fp, sl, r4
 8004eee:	d00b      	beq.n	8004f08 <_vfiprintf_r+0xa4>
 8004ef0:	465b      	mov	r3, fp
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f7ff ffa1 	bl	8004e3e <__sfputs_r>
 8004efc:	3001      	adds	r0, #1
 8004efe:	f000 80a9 	beq.w	8005054 <_vfiprintf_r+0x1f0>
 8004f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f04:	445a      	add	r2, fp
 8004f06:	9209      	str	r2, [sp, #36]	; 0x24
 8004f08:	f89a 3000 	ldrb.w	r3, [sl]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80a1 	beq.w	8005054 <_vfiprintf_r+0x1f0>
 8004f12:	2300      	movs	r3, #0
 8004f14:	f04f 32ff 	mov.w	r2, #4294967295
 8004f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f1c:	f10a 0a01 	add.w	sl, sl, #1
 8004f20:	9304      	str	r3, [sp, #16]
 8004f22:	9307      	str	r3, [sp, #28]
 8004f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f28:	931a      	str	r3, [sp, #104]	; 0x68
 8004f2a:	4654      	mov	r4, sl
 8004f2c:	2205      	movs	r2, #5
 8004f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f32:	4854      	ldr	r0, [pc, #336]	; (8005084 <_vfiprintf_r+0x220>)
 8004f34:	f7fb f95c 	bl	80001f0 <memchr>
 8004f38:	9a04      	ldr	r2, [sp, #16]
 8004f3a:	b9d8      	cbnz	r0, 8004f74 <_vfiprintf_r+0x110>
 8004f3c:	06d1      	lsls	r1, r2, #27
 8004f3e:	bf44      	itt	mi
 8004f40:	2320      	movmi	r3, #32
 8004f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f46:	0713      	lsls	r3, r2, #28
 8004f48:	bf44      	itt	mi
 8004f4a:	232b      	movmi	r3, #43	; 0x2b
 8004f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f50:	f89a 3000 	ldrb.w	r3, [sl]
 8004f54:	2b2a      	cmp	r3, #42	; 0x2a
 8004f56:	d015      	beq.n	8004f84 <_vfiprintf_r+0x120>
 8004f58:	9a07      	ldr	r2, [sp, #28]
 8004f5a:	4654      	mov	r4, sl
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	f04f 0c0a 	mov.w	ip, #10
 8004f62:	4621      	mov	r1, r4
 8004f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f68:	3b30      	subs	r3, #48	; 0x30
 8004f6a:	2b09      	cmp	r3, #9
 8004f6c:	d94d      	bls.n	800500a <_vfiprintf_r+0x1a6>
 8004f6e:	b1b0      	cbz	r0, 8004f9e <_vfiprintf_r+0x13a>
 8004f70:	9207      	str	r2, [sp, #28]
 8004f72:	e014      	b.n	8004f9e <_vfiprintf_r+0x13a>
 8004f74:	eba0 0308 	sub.w	r3, r0, r8
 8004f78:	fa09 f303 	lsl.w	r3, r9, r3
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	9304      	str	r3, [sp, #16]
 8004f80:	46a2      	mov	sl, r4
 8004f82:	e7d2      	b.n	8004f2a <_vfiprintf_r+0xc6>
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	1d19      	adds	r1, r3, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	9103      	str	r1, [sp, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bfbb      	ittet	lt
 8004f90:	425b      	neglt	r3, r3
 8004f92:	f042 0202 	orrlt.w	r2, r2, #2
 8004f96:	9307      	strge	r3, [sp, #28]
 8004f98:	9307      	strlt	r3, [sp, #28]
 8004f9a:	bfb8      	it	lt
 8004f9c:	9204      	strlt	r2, [sp, #16]
 8004f9e:	7823      	ldrb	r3, [r4, #0]
 8004fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa2:	d10c      	bne.n	8004fbe <_vfiprintf_r+0x15a>
 8004fa4:	7863      	ldrb	r3, [r4, #1]
 8004fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fa8:	d134      	bne.n	8005014 <_vfiprintf_r+0x1b0>
 8004faa:	9b03      	ldr	r3, [sp, #12]
 8004fac:	1d1a      	adds	r2, r3, #4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	9203      	str	r2, [sp, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bfb8      	it	lt
 8004fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fba:	3402      	adds	r4, #2
 8004fbc:	9305      	str	r3, [sp, #20]
 8004fbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005094 <_vfiprintf_r+0x230>
 8004fc2:	7821      	ldrb	r1, [r4, #0]
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	4650      	mov	r0, sl
 8004fc8:	f7fb f912 	bl	80001f0 <memchr>
 8004fcc:	b138      	cbz	r0, 8004fde <_vfiprintf_r+0x17a>
 8004fce:	9b04      	ldr	r3, [sp, #16]
 8004fd0:	eba0 000a 	sub.w	r0, r0, sl
 8004fd4:	2240      	movs	r2, #64	; 0x40
 8004fd6:	4082      	lsls	r2, r0
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	3401      	adds	r4, #1
 8004fdc:	9304      	str	r3, [sp, #16]
 8004fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe2:	4829      	ldr	r0, [pc, #164]	; (8005088 <_vfiprintf_r+0x224>)
 8004fe4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fe8:	2206      	movs	r2, #6
 8004fea:	f7fb f901 	bl	80001f0 <memchr>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d03f      	beq.n	8005072 <_vfiprintf_r+0x20e>
 8004ff2:	4b26      	ldr	r3, [pc, #152]	; (800508c <_vfiprintf_r+0x228>)
 8004ff4:	bb1b      	cbnz	r3, 800503e <_vfiprintf_r+0x1da>
 8004ff6:	9b03      	ldr	r3, [sp, #12]
 8004ff8:	3307      	adds	r3, #7
 8004ffa:	f023 0307 	bic.w	r3, r3, #7
 8004ffe:	3308      	adds	r3, #8
 8005000:	9303      	str	r3, [sp, #12]
 8005002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005004:	443b      	add	r3, r7
 8005006:	9309      	str	r3, [sp, #36]	; 0x24
 8005008:	e768      	b.n	8004edc <_vfiprintf_r+0x78>
 800500a:	fb0c 3202 	mla	r2, ip, r2, r3
 800500e:	460c      	mov	r4, r1
 8005010:	2001      	movs	r0, #1
 8005012:	e7a6      	b.n	8004f62 <_vfiprintf_r+0xfe>
 8005014:	2300      	movs	r3, #0
 8005016:	3401      	adds	r4, #1
 8005018:	9305      	str	r3, [sp, #20]
 800501a:	4619      	mov	r1, r3
 800501c:	f04f 0c0a 	mov.w	ip, #10
 8005020:	4620      	mov	r0, r4
 8005022:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005026:	3a30      	subs	r2, #48	; 0x30
 8005028:	2a09      	cmp	r2, #9
 800502a:	d903      	bls.n	8005034 <_vfiprintf_r+0x1d0>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0c6      	beq.n	8004fbe <_vfiprintf_r+0x15a>
 8005030:	9105      	str	r1, [sp, #20]
 8005032:	e7c4      	b.n	8004fbe <_vfiprintf_r+0x15a>
 8005034:	fb0c 2101 	mla	r1, ip, r1, r2
 8005038:	4604      	mov	r4, r0
 800503a:	2301      	movs	r3, #1
 800503c:	e7f0      	b.n	8005020 <_vfiprintf_r+0x1bc>
 800503e:	ab03      	add	r3, sp, #12
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	462a      	mov	r2, r5
 8005044:	4b12      	ldr	r3, [pc, #72]	; (8005090 <_vfiprintf_r+0x22c>)
 8005046:	a904      	add	r1, sp, #16
 8005048:	4630      	mov	r0, r6
 800504a:	f3af 8000 	nop.w
 800504e:	4607      	mov	r7, r0
 8005050:	1c78      	adds	r0, r7, #1
 8005052:	d1d6      	bne.n	8005002 <_vfiprintf_r+0x19e>
 8005054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005056:	07d9      	lsls	r1, r3, #31
 8005058:	d405      	bmi.n	8005066 <_vfiprintf_r+0x202>
 800505a:	89ab      	ldrh	r3, [r5, #12]
 800505c:	059a      	lsls	r2, r3, #22
 800505e:	d402      	bmi.n	8005066 <_vfiprintf_r+0x202>
 8005060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005062:	f7ff fc75 	bl	8004950 <__retarget_lock_release_recursive>
 8005066:	89ab      	ldrh	r3, [r5, #12]
 8005068:	065b      	lsls	r3, r3, #25
 800506a:	f53f af1d 	bmi.w	8004ea8 <_vfiprintf_r+0x44>
 800506e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005070:	e71c      	b.n	8004eac <_vfiprintf_r+0x48>
 8005072:	ab03      	add	r3, sp, #12
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	462a      	mov	r2, r5
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <_vfiprintf_r+0x22c>)
 800507a:	a904      	add	r1, sp, #16
 800507c:	4630      	mov	r0, r6
 800507e:	f000 f879 	bl	8005174 <_printf_i>
 8005082:	e7e4      	b.n	800504e <_vfiprintf_r+0x1ea>
 8005084:	0800588a 	.word	0x0800588a
 8005088:	08005894 	.word	0x08005894
 800508c:	00000000 	.word	0x00000000
 8005090:	08004e3f 	.word	0x08004e3f
 8005094:	08005890 	.word	0x08005890

08005098 <_printf_common>:
 8005098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800509c:	4616      	mov	r6, r2
 800509e:	4699      	mov	r9, r3
 80050a0:	688a      	ldr	r2, [r1, #8]
 80050a2:	690b      	ldr	r3, [r1, #16]
 80050a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050a8:	4293      	cmp	r3, r2
 80050aa:	bfb8      	it	lt
 80050ac:	4613      	movlt	r3, r2
 80050ae:	6033      	str	r3, [r6, #0]
 80050b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050b4:	4607      	mov	r7, r0
 80050b6:	460c      	mov	r4, r1
 80050b8:	b10a      	cbz	r2, 80050be <_printf_common+0x26>
 80050ba:	3301      	adds	r3, #1
 80050bc:	6033      	str	r3, [r6, #0]
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	0699      	lsls	r1, r3, #26
 80050c2:	bf42      	ittt	mi
 80050c4:	6833      	ldrmi	r3, [r6, #0]
 80050c6:	3302      	addmi	r3, #2
 80050c8:	6033      	strmi	r3, [r6, #0]
 80050ca:	6825      	ldr	r5, [r4, #0]
 80050cc:	f015 0506 	ands.w	r5, r5, #6
 80050d0:	d106      	bne.n	80050e0 <_printf_common+0x48>
 80050d2:	f104 0a19 	add.w	sl, r4, #25
 80050d6:	68e3      	ldr	r3, [r4, #12]
 80050d8:	6832      	ldr	r2, [r6, #0]
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	42ab      	cmp	r3, r5
 80050de:	dc26      	bgt.n	800512e <_printf_common+0x96>
 80050e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050e4:	1e13      	subs	r3, r2, #0
 80050e6:	6822      	ldr	r2, [r4, #0]
 80050e8:	bf18      	it	ne
 80050ea:	2301      	movne	r3, #1
 80050ec:	0692      	lsls	r2, r2, #26
 80050ee:	d42b      	bmi.n	8005148 <_printf_common+0xb0>
 80050f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050f4:	4649      	mov	r1, r9
 80050f6:	4638      	mov	r0, r7
 80050f8:	47c0      	blx	r8
 80050fa:	3001      	adds	r0, #1
 80050fc:	d01e      	beq.n	800513c <_printf_common+0xa4>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	6922      	ldr	r2, [r4, #16]
 8005102:	f003 0306 	and.w	r3, r3, #6
 8005106:	2b04      	cmp	r3, #4
 8005108:	bf02      	ittt	eq
 800510a:	68e5      	ldreq	r5, [r4, #12]
 800510c:	6833      	ldreq	r3, [r6, #0]
 800510e:	1aed      	subeq	r5, r5, r3
 8005110:	68a3      	ldr	r3, [r4, #8]
 8005112:	bf0c      	ite	eq
 8005114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005118:	2500      	movne	r5, #0
 800511a:	4293      	cmp	r3, r2
 800511c:	bfc4      	itt	gt
 800511e:	1a9b      	subgt	r3, r3, r2
 8005120:	18ed      	addgt	r5, r5, r3
 8005122:	2600      	movs	r6, #0
 8005124:	341a      	adds	r4, #26
 8005126:	42b5      	cmp	r5, r6
 8005128:	d11a      	bne.n	8005160 <_printf_common+0xc8>
 800512a:	2000      	movs	r0, #0
 800512c:	e008      	b.n	8005140 <_printf_common+0xa8>
 800512e:	2301      	movs	r3, #1
 8005130:	4652      	mov	r2, sl
 8005132:	4649      	mov	r1, r9
 8005134:	4638      	mov	r0, r7
 8005136:	47c0      	blx	r8
 8005138:	3001      	adds	r0, #1
 800513a:	d103      	bne.n	8005144 <_printf_common+0xac>
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005144:	3501      	adds	r5, #1
 8005146:	e7c6      	b.n	80050d6 <_printf_common+0x3e>
 8005148:	18e1      	adds	r1, r4, r3
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	2030      	movs	r0, #48	; 0x30
 800514e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005152:	4422      	add	r2, r4
 8005154:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005158:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800515c:	3302      	adds	r3, #2
 800515e:	e7c7      	b.n	80050f0 <_printf_common+0x58>
 8005160:	2301      	movs	r3, #1
 8005162:	4622      	mov	r2, r4
 8005164:	4649      	mov	r1, r9
 8005166:	4638      	mov	r0, r7
 8005168:	47c0      	blx	r8
 800516a:	3001      	adds	r0, #1
 800516c:	d0e6      	beq.n	800513c <_printf_common+0xa4>
 800516e:	3601      	adds	r6, #1
 8005170:	e7d9      	b.n	8005126 <_printf_common+0x8e>
	...

08005174 <_printf_i>:
 8005174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005178:	7e0f      	ldrb	r7, [r1, #24]
 800517a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800517c:	2f78      	cmp	r7, #120	; 0x78
 800517e:	4691      	mov	r9, r2
 8005180:	4680      	mov	r8, r0
 8005182:	460c      	mov	r4, r1
 8005184:	469a      	mov	sl, r3
 8005186:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800518a:	d807      	bhi.n	800519c <_printf_i+0x28>
 800518c:	2f62      	cmp	r7, #98	; 0x62
 800518e:	d80a      	bhi.n	80051a6 <_printf_i+0x32>
 8005190:	2f00      	cmp	r7, #0
 8005192:	f000 80d4 	beq.w	800533e <_printf_i+0x1ca>
 8005196:	2f58      	cmp	r7, #88	; 0x58
 8005198:	f000 80c0 	beq.w	800531c <_printf_i+0x1a8>
 800519c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051a4:	e03a      	b.n	800521c <_printf_i+0xa8>
 80051a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051aa:	2b15      	cmp	r3, #21
 80051ac:	d8f6      	bhi.n	800519c <_printf_i+0x28>
 80051ae:	a101      	add	r1, pc, #4	; (adr r1, 80051b4 <_printf_i+0x40>)
 80051b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051b4:	0800520d 	.word	0x0800520d
 80051b8:	08005221 	.word	0x08005221
 80051bc:	0800519d 	.word	0x0800519d
 80051c0:	0800519d 	.word	0x0800519d
 80051c4:	0800519d 	.word	0x0800519d
 80051c8:	0800519d 	.word	0x0800519d
 80051cc:	08005221 	.word	0x08005221
 80051d0:	0800519d 	.word	0x0800519d
 80051d4:	0800519d 	.word	0x0800519d
 80051d8:	0800519d 	.word	0x0800519d
 80051dc:	0800519d 	.word	0x0800519d
 80051e0:	08005325 	.word	0x08005325
 80051e4:	0800524d 	.word	0x0800524d
 80051e8:	080052df 	.word	0x080052df
 80051ec:	0800519d 	.word	0x0800519d
 80051f0:	0800519d 	.word	0x0800519d
 80051f4:	08005347 	.word	0x08005347
 80051f8:	0800519d 	.word	0x0800519d
 80051fc:	0800524d 	.word	0x0800524d
 8005200:	0800519d 	.word	0x0800519d
 8005204:	0800519d 	.word	0x0800519d
 8005208:	080052e7 	.word	0x080052e7
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	1d1a      	adds	r2, r3, #4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	602a      	str	r2, [r5, #0]
 8005214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800521c:	2301      	movs	r3, #1
 800521e:	e09f      	b.n	8005360 <_printf_i+0x1ec>
 8005220:	6820      	ldr	r0, [r4, #0]
 8005222:	682b      	ldr	r3, [r5, #0]
 8005224:	0607      	lsls	r7, r0, #24
 8005226:	f103 0104 	add.w	r1, r3, #4
 800522a:	6029      	str	r1, [r5, #0]
 800522c:	d501      	bpl.n	8005232 <_printf_i+0xbe>
 800522e:	681e      	ldr	r6, [r3, #0]
 8005230:	e003      	b.n	800523a <_printf_i+0xc6>
 8005232:	0646      	lsls	r6, r0, #25
 8005234:	d5fb      	bpl.n	800522e <_printf_i+0xba>
 8005236:	f9b3 6000 	ldrsh.w	r6, [r3]
 800523a:	2e00      	cmp	r6, #0
 800523c:	da03      	bge.n	8005246 <_printf_i+0xd2>
 800523e:	232d      	movs	r3, #45	; 0x2d
 8005240:	4276      	negs	r6, r6
 8005242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005246:	485a      	ldr	r0, [pc, #360]	; (80053b0 <_printf_i+0x23c>)
 8005248:	230a      	movs	r3, #10
 800524a:	e012      	b.n	8005272 <_printf_i+0xfe>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	6820      	ldr	r0, [r4, #0]
 8005250:	1d19      	adds	r1, r3, #4
 8005252:	6029      	str	r1, [r5, #0]
 8005254:	0605      	lsls	r5, r0, #24
 8005256:	d501      	bpl.n	800525c <_printf_i+0xe8>
 8005258:	681e      	ldr	r6, [r3, #0]
 800525a:	e002      	b.n	8005262 <_printf_i+0xee>
 800525c:	0641      	lsls	r1, r0, #25
 800525e:	d5fb      	bpl.n	8005258 <_printf_i+0xe4>
 8005260:	881e      	ldrh	r6, [r3, #0]
 8005262:	4853      	ldr	r0, [pc, #332]	; (80053b0 <_printf_i+0x23c>)
 8005264:	2f6f      	cmp	r7, #111	; 0x6f
 8005266:	bf0c      	ite	eq
 8005268:	2308      	moveq	r3, #8
 800526a:	230a      	movne	r3, #10
 800526c:	2100      	movs	r1, #0
 800526e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005272:	6865      	ldr	r5, [r4, #4]
 8005274:	60a5      	str	r5, [r4, #8]
 8005276:	2d00      	cmp	r5, #0
 8005278:	bfa2      	ittt	ge
 800527a:	6821      	ldrge	r1, [r4, #0]
 800527c:	f021 0104 	bicge.w	r1, r1, #4
 8005280:	6021      	strge	r1, [r4, #0]
 8005282:	b90e      	cbnz	r6, 8005288 <_printf_i+0x114>
 8005284:	2d00      	cmp	r5, #0
 8005286:	d04b      	beq.n	8005320 <_printf_i+0x1ac>
 8005288:	4615      	mov	r5, r2
 800528a:	fbb6 f1f3 	udiv	r1, r6, r3
 800528e:	fb03 6711 	mls	r7, r3, r1, r6
 8005292:	5dc7      	ldrb	r7, [r0, r7]
 8005294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005298:	4637      	mov	r7, r6
 800529a:	42bb      	cmp	r3, r7
 800529c:	460e      	mov	r6, r1
 800529e:	d9f4      	bls.n	800528a <_printf_i+0x116>
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d10b      	bne.n	80052bc <_printf_i+0x148>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	07de      	lsls	r6, r3, #31
 80052a8:	d508      	bpl.n	80052bc <_printf_i+0x148>
 80052aa:	6923      	ldr	r3, [r4, #16]
 80052ac:	6861      	ldr	r1, [r4, #4]
 80052ae:	4299      	cmp	r1, r3
 80052b0:	bfde      	ittt	le
 80052b2:	2330      	movle	r3, #48	; 0x30
 80052b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052bc:	1b52      	subs	r2, r2, r5
 80052be:	6122      	str	r2, [r4, #16]
 80052c0:	f8cd a000 	str.w	sl, [sp]
 80052c4:	464b      	mov	r3, r9
 80052c6:	aa03      	add	r2, sp, #12
 80052c8:	4621      	mov	r1, r4
 80052ca:	4640      	mov	r0, r8
 80052cc:	f7ff fee4 	bl	8005098 <_printf_common>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d14a      	bne.n	800536a <_printf_i+0x1f6>
 80052d4:	f04f 30ff 	mov.w	r0, #4294967295
 80052d8:	b004      	add	sp, #16
 80052da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	f043 0320 	orr.w	r3, r3, #32
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	4833      	ldr	r0, [pc, #204]	; (80053b4 <_printf_i+0x240>)
 80052e8:	2778      	movs	r7, #120	; 0x78
 80052ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	6829      	ldr	r1, [r5, #0]
 80052f2:	061f      	lsls	r7, r3, #24
 80052f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80052f8:	d402      	bmi.n	8005300 <_printf_i+0x18c>
 80052fa:	065f      	lsls	r7, r3, #25
 80052fc:	bf48      	it	mi
 80052fe:	b2b6      	uxthmi	r6, r6
 8005300:	07df      	lsls	r7, r3, #31
 8005302:	bf48      	it	mi
 8005304:	f043 0320 	orrmi.w	r3, r3, #32
 8005308:	6029      	str	r1, [r5, #0]
 800530a:	bf48      	it	mi
 800530c:	6023      	strmi	r3, [r4, #0]
 800530e:	b91e      	cbnz	r6, 8005318 <_printf_i+0x1a4>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	f023 0320 	bic.w	r3, r3, #32
 8005316:	6023      	str	r3, [r4, #0]
 8005318:	2310      	movs	r3, #16
 800531a:	e7a7      	b.n	800526c <_printf_i+0xf8>
 800531c:	4824      	ldr	r0, [pc, #144]	; (80053b0 <_printf_i+0x23c>)
 800531e:	e7e4      	b.n	80052ea <_printf_i+0x176>
 8005320:	4615      	mov	r5, r2
 8005322:	e7bd      	b.n	80052a0 <_printf_i+0x12c>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	6826      	ldr	r6, [r4, #0]
 8005328:	6961      	ldr	r1, [r4, #20]
 800532a:	1d18      	adds	r0, r3, #4
 800532c:	6028      	str	r0, [r5, #0]
 800532e:	0635      	lsls	r5, r6, #24
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	d501      	bpl.n	8005338 <_printf_i+0x1c4>
 8005334:	6019      	str	r1, [r3, #0]
 8005336:	e002      	b.n	800533e <_printf_i+0x1ca>
 8005338:	0670      	lsls	r0, r6, #25
 800533a:	d5fb      	bpl.n	8005334 <_printf_i+0x1c0>
 800533c:	8019      	strh	r1, [r3, #0]
 800533e:	2300      	movs	r3, #0
 8005340:	6123      	str	r3, [r4, #16]
 8005342:	4615      	mov	r5, r2
 8005344:	e7bc      	b.n	80052c0 <_printf_i+0x14c>
 8005346:	682b      	ldr	r3, [r5, #0]
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	602a      	str	r2, [r5, #0]
 800534c:	681d      	ldr	r5, [r3, #0]
 800534e:	6862      	ldr	r2, [r4, #4]
 8005350:	2100      	movs	r1, #0
 8005352:	4628      	mov	r0, r5
 8005354:	f7fa ff4c 	bl	80001f0 <memchr>
 8005358:	b108      	cbz	r0, 800535e <_printf_i+0x1ea>
 800535a:	1b40      	subs	r0, r0, r5
 800535c:	6060      	str	r0, [r4, #4]
 800535e:	6863      	ldr	r3, [r4, #4]
 8005360:	6123      	str	r3, [r4, #16]
 8005362:	2300      	movs	r3, #0
 8005364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005368:	e7aa      	b.n	80052c0 <_printf_i+0x14c>
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	462a      	mov	r2, r5
 800536e:	4649      	mov	r1, r9
 8005370:	4640      	mov	r0, r8
 8005372:	47d0      	blx	sl
 8005374:	3001      	adds	r0, #1
 8005376:	d0ad      	beq.n	80052d4 <_printf_i+0x160>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	079b      	lsls	r3, r3, #30
 800537c:	d413      	bmi.n	80053a6 <_printf_i+0x232>
 800537e:	68e0      	ldr	r0, [r4, #12]
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	4298      	cmp	r0, r3
 8005384:	bfb8      	it	lt
 8005386:	4618      	movlt	r0, r3
 8005388:	e7a6      	b.n	80052d8 <_printf_i+0x164>
 800538a:	2301      	movs	r3, #1
 800538c:	4632      	mov	r2, r6
 800538e:	4649      	mov	r1, r9
 8005390:	4640      	mov	r0, r8
 8005392:	47d0      	blx	sl
 8005394:	3001      	adds	r0, #1
 8005396:	d09d      	beq.n	80052d4 <_printf_i+0x160>
 8005398:	3501      	adds	r5, #1
 800539a:	68e3      	ldr	r3, [r4, #12]
 800539c:	9903      	ldr	r1, [sp, #12]
 800539e:	1a5b      	subs	r3, r3, r1
 80053a0:	42ab      	cmp	r3, r5
 80053a2:	dcf2      	bgt.n	800538a <_printf_i+0x216>
 80053a4:	e7eb      	b.n	800537e <_printf_i+0x20a>
 80053a6:	2500      	movs	r5, #0
 80053a8:	f104 0619 	add.w	r6, r4, #25
 80053ac:	e7f5      	b.n	800539a <_printf_i+0x226>
 80053ae:	bf00      	nop
 80053b0:	0800589b 	.word	0x0800589b
 80053b4:	080058ac 	.word	0x080058ac

080053b8 <__swbuf_r>:
 80053b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ba:	460e      	mov	r6, r1
 80053bc:	4614      	mov	r4, r2
 80053be:	4605      	mov	r5, r0
 80053c0:	b118      	cbz	r0, 80053ca <__swbuf_r+0x12>
 80053c2:	6a03      	ldr	r3, [r0, #32]
 80053c4:	b90b      	cbnz	r3, 80053ca <__swbuf_r+0x12>
 80053c6:	f7ff f989 	bl	80046dc <__sinit>
 80053ca:	69a3      	ldr	r3, [r4, #24]
 80053cc:	60a3      	str	r3, [r4, #8]
 80053ce:	89a3      	ldrh	r3, [r4, #12]
 80053d0:	071a      	lsls	r2, r3, #28
 80053d2:	d525      	bpl.n	8005420 <__swbuf_r+0x68>
 80053d4:	6923      	ldr	r3, [r4, #16]
 80053d6:	b31b      	cbz	r3, 8005420 <__swbuf_r+0x68>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	6922      	ldr	r2, [r4, #16]
 80053dc:	1a98      	subs	r0, r3, r2
 80053de:	6963      	ldr	r3, [r4, #20]
 80053e0:	b2f6      	uxtb	r6, r6
 80053e2:	4283      	cmp	r3, r0
 80053e4:	4637      	mov	r7, r6
 80053e6:	dc04      	bgt.n	80053f2 <__swbuf_r+0x3a>
 80053e8:	4621      	mov	r1, r4
 80053ea:	4628      	mov	r0, r5
 80053ec:	f7ff f8ae 	bl	800454c <_fflush_r>
 80053f0:	b9e0      	cbnz	r0, 800542c <__swbuf_r+0x74>
 80053f2:	68a3      	ldr	r3, [r4, #8]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	60a3      	str	r3, [r4, #8]
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	6022      	str	r2, [r4, #0]
 80053fe:	701e      	strb	r6, [r3, #0]
 8005400:	6962      	ldr	r2, [r4, #20]
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	429a      	cmp	r2, r3
 8005406:	d004      	beq.n	8005412 <__swbuf_r+0x5a>
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	07db      	lsls	r3, r3, #31
 800540c:	d506      	bpl.n	800541c <__swbuf_r+0x64>
 800540e:	2e0a      	cmp	r6, #10
 8005410:	d104      	bne.n	800541c <__swbuf_r+0x64>
 8005412:	4621      	mov	r1, r4
 8005414:	4628      	mov	r0, r5
 8005416:	f7ff f899 	bl	800454c <_fflush_r>
 800541a:	b938      	cbnz	r0, 800542c <__swbuf_r+0x74>
 800541c:	4638      	mov	r0, r7
 800541e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005420:	4621      	mov	r1, r4
 8005422:	4628      	mov	r0, r5
 8005424:	f000 f806 	bl	8005434 <__swsetup_r>
 8005428:	2800      	cmp	r0, #0
 800542a:	d0d5      	beq.n	80053d8 <__swbuf_r+0x20>
 800542c:	f04f 37ff 	mov.w	r7, #4294967295
 8005430:	e7f4      	b.n	800541c <__swbuf_r+0x64>
	...

08005434 <__swsetup_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4b2a      	ldr	r3, [pc, #168]	; (80054e0 <__swsetup_r+0xac>)
 8005438:	4605      	mov	r5, r0
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	460c      	mov	r4, r1
 800543e:	b118      	cbz	r0, 8005448 <__swsetup_r+0x14>
 8005440:	6a03      	ldr	r3, [r0, #32]
 8005442:	b90b      	cbnz	r3, 8005448 <__swsetup_r+0x14>
 8005444:	f7ff f94a 	bl	80046dc <__sinit>
 8005448:	89a3      	ldrh	r3, [r4, #12]
 800544a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800544e:	0718      	lsls	r0, r3, #28
 8005450:	d422      	bmi.n	8005498 <__swsetup_r+0x64>
 8005452:	06d9      	lsls	r1, r3, #27
 8005454:	d407      	bmi.n	8005466 <__swsetup_r+0x32>
 8005456:	2309      	movs	r3, #9
 8005458:	602b      	str	r3, [r5, #0]
 800545a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	f04f 30ff 	mov.w	r0, #4294967295
 8005464:	e034      	b.n	80054d0 <__swsetup_r+0x9c>
 8005466:	0758      	lsls	r0, r3, #29
 8005468:	d512      	bpl.n	8005490 <__swsetup_r+0x5c>
 800546a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800546c:	b141      	cbz	r1, 8005480 <__swsetup_r+0x4c>
 800546e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005472:	4299      	cmp	r1, r3
 8005474:	d002      	beq.n	800547c <__swsetup_r+0x48>
 8005476:	4628      	mov	r0, r5
 8005478:	f7ff fa7a 	bl	8004970 <_free_r>
 800547c:	2300      	movs	r3, #0
 800547e:	6363      	str	r3, [r4, #52]	; 0x34
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005486:	81a3      	strh	r3, [r4, #12]
 8005488:	2300      	movs	r3, #0
 800548a:	6063      	str	r3, [r4, #4]
 800548c:	6923      	ldr	r3, [r4, #16]
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	f043 0308 	orr.w	r3, r3, #8
 8005496:	81a3      	strh	r3, [r4, #12]
 8005498:	6923      	ldr	r3, [r4, #16]
 800549a:	b94b      	cbnz	r3, 80054b0 <__swsetup_r+0x7c>
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a6:	d003      	beq.n	80054b0 <__swsetup_r+0x7c>
 80054a8:	4621      	mov	r1, r4
 80054aa:	4628      	mov	r0, r5
 80054ac:	f000 f899 	bl	80055e2 <__smakebuf_r>
 80054b0:	89a0      	ldrh	r0, [r4, #12]
 80054b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054b6:	f010 0301 	ands.w	r3, r0, #1
 80054ba:	d00a      	beq.n	80054d2 <__swsetup_r+0x9e>
 80054bc:	2300      	movs	r3, #0
 80054be:	60a3      	str	r3, [r4, #8]
 80054c0:	6963      	ldr	r3, [r4, #20]
 80054c2:	425b      	negs	r3, r3
 80054c4:	61a3      	str	r3, [r4, #24]
 80054c6:	6923      	ldr	r3, [r4, #16]
 80054c8:	b943      	cbnz	r3, 80054dc <__swsetup_r+0xa8>
 80054ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054ce:	d1c4      	bne.n	800545a <__swsetup_r+0x26>
 80054d0:	bd38      	pop	{r3, r4, r5, pc}
 80054d2:	0781      	lsls	r1, r0, #30
 80054d4:	bf58      	it	pl
 80054d6:	6963      	ldrpl	r3, [r4, #20]
 80054d8:	60a3      	str	r3, [r4, #8]
 80054da:	e7f4      	b.n	80054c6 <__swsetup_r+0x92>
 80054dc:	2000      	movs	r0, #0
 80054de:	e7f7      	b.n	80054d0 <__swsetup_r+0x9c>
 80054e0:	20000080 	.word	0x20000080

080054e4 <memmove>:
 80054e4:	4288      	cmp	r0, r1
 80054e6:	b510      	push	{r4, lr}
 80054e8:	eb01 0402 	add.w	r4, r1, r2
 80054ec:	d902      	bls.n	80054f4 <memmove+0x10>
 80054ee:	4284      	cmp	r4, r0
 80054f0:	4623      	mov	r3, r4
 80054f2:	d807      	bhi.n	8005504 <memmove+0x20>
 80054f4:	1e43      	subs	r3, r0, #1
 80054f6:	42a1      	cmp	r1, r4
 80054f8:	d008      	beq.n	800550c <memmove+0x28>
 80054fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005502:	e7f8      	b.n	80054f6 <memmove+0x12>
 8005504:	4402      	add	r2, r0
 8005506:	4601      	mov	r1, r0
 8005508:	428a      	cmp	r2, r1
 800550a:	d100      	bne.n	800550e <memmove+0x2a>
 800550c:	bd10      	pop	{r4, pc}
 800550e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005516:	e7f7      	b.n	8005508 <memmove+0x24>

08005518 <_sbrk_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4d06      	ldr	r5, [pc, #24]	; (8005534 <_sbrk_r+0x1c>)
 800551c:	2300      	movs	r3, #0
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fb fb26 	bl	8000b74 <_sbrk>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_sbrk_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_sbrk_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	2000437c 	.word	0x2000437c

08005538 <_realloc_r>:
 8005538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553c:	4680      	mov	r8, r0
 800553e:	4614      	mov	r4, r2
 8005540:	460e      	mov	r6, r1
 8005542:	b921      	cbnz	r1, 800554e <_realloc_r+0x16>
 8005544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005548:	4611      	mov	r1, r2
 800554a:	f7ff ba7d 	b.w	8004a48 <_malloc_r>
 800554e:	b92a      	cbnz	r2, 800555c <_realloc_r+0x24>
 8005550:	f7ff fa0e 	bl	8004970 <_free_r>
 8005554:	4625      	mov	r5, r4
 8005556:	4628      	mov	r0, r5
 8005558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800555c:	f000 f8a0 	bl	80056a0 <_malloc_usable_size_r>
 8005560:	4284      	cmp	r4, r0
 8005562:	4607      	mov	r7, r0
 8005564:	d802      	bhi.n	800556c <_realloc_r+0x34>
 8005566:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800556a:	d812      	bhi.n	8005592 <_realloc_r+0x5a>
 800556c:	4621      	mov	r1, r4
 800556e:	4640      	mov	r0, r8
 8005570:	f7ff fa6a 	bl	8004a48 <_malloc_r>
 8005574:	4605      	mov	r5, r0
 8005576:	2800      	cmp	r0, #0
 8005578:	d0ed      	beq.n	8005556 <_realloc_r+0x1e>
 800557a:	42bc      	cmp	r4, r7
 800557c:	4622      	mov	r2, r4
 800557e:	4631      	mov	r1, r6
 8005580:	bf28      	it	cs
 8005582:	463a      	movcs	r2, r7
 8005584:	f7ff f9e5 	bl	8004952 <memcpy>
 8005588:	4631      	mov	r1, r6
 800558a:	4640      	mov	r0, r8
 800558c:	f7ff f9f0 	bl	8004970 <_free_r>
 8005590:	e7e1      	b.n	8005556 <_realloc_r+0x1e>
 8005592:	4635      	mov	r5, r6
 8005594:	e7df      	b.n	8005556 <_realloc_r+0x1e>

08005596 <__swhatbuf_r>:
 8005596:	b570      	push	{r4, r5, r6, lr}
 8005598:	460c      	mov	r4, r1
 800559a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800559e:	2900      	cmp	r1, #0
 80055a0:	b096      	sub	sp, #88	; 0x58
 80055a2:	4615      	mov	r5, r2
 80055a4:	461e      	mov	r6, r3
 80055a6:	da0d      	bge.n	80055c4 <__swhatbuf_r+0x2e>
 80055a8:	89a3      	ldrh	r3, [r4, #12]
 80055aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80055ae:	f04f 0100 	mov.w	r1, #0
 80055b2:	bf0c      	ite	eq
 80055b4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80055b8:	2340      	movne	r3, #64	; 0x40
 80055ba:	2000      	movs	r0, #0
 80055bc:	6031      	str	r1, [r6, #0]
 80055be:	602b      	str	r3, [r5, #0]
 80055c0:	b016      	add	sp, #88	; 0x58
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
 80055c4:	466a      	mov	r2, sp
 80055c6:	f000 f849 	bl	800565c <_fstat_r>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	dbec      	blt.n	80055a8 <__swhatbuf_r+0x12>
 80055ce:	9901      	ldr	r1, [sp, #4]
 80055d0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80055d4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80055d8:	4259      	negs	r1, r3
 80055da:	4159      	adcs	r1, r3
 80055dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055e0:	e7eb      	b.n	80055ba <__swhatbuf_r+0x24>

080055e2 <__smakebuf_r>:
 80055e2:	898b      	ldrh	r3, [r1, #12]
 80055e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055e6:	079d      	lsls	r5, r3, #30
 80055e8:	4606      	mov	r6, r0
 80055ea:	460c      	mov	r4, r1
 80055ec:	d507      	bpl.n	80055fe <__smakebuf_r+0x1c>
 80055ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055f2:	6023      	str	r3, [r4, #0]
 80055f4:	6123      	str	r3, [r4, #16]
 80055f6:	2301      	movs	r3, #1
 80055f8:	6163      	str	r3, [r4, #20]
 80055fa:	b002      	add	sp, #8
 80055fc:	bd70      	pop	{r4, r5, r6, pc}
 80055fe:	ab01      	add	r3, sp, #4
 8005600:	466a      	mov	r2, sp
 8005602:	f7ff ffc8 	bl	8005596 <__swhatbuf_r>
 8005606:	9900      	ldr	r1, [sp, #0]
 8005608:	4605      	mov	r5, r0
 800560a:	4630      	mov	r0, r6
 800560c:	f7ff fa1c 	bl	8004a48 <_malloc_r>
 8005610:	b948      	cbnz	r0, 8005626 <__smakebuf_r+0x44>
 8005612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005616:	059a      	lsls	r2, r3, #22
 8005618:	d4ef      	bmi.n	80055fa <__smakebuf_r+0x18>
 800561a:	f023 0303 	bic.w	r3, r3, #3
 800561e:	f043 0302 	orr.w	r3, r3, #2
 8005622:	81a3      	strh	r3, [r4, #12]
 8005624:	e7e3      	b.n	80055ee <__smakebuf_r+0xc>
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	6020      	str	r0, [r4, #0]
 800562a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562e:	81a3      	strh	r3, [r4, #12]
 8005630:	9b00      	ldr	r3, [sp, #0]
 8005632:	6163      	str	r3, [r4, #20]
 8005634:	9b01      	ldr	r3, [sp, #4]
 8005636:	6120      	str	r0, [r4, #16]
 8005638:	b15b      	cbz	r3, 8005652 <__smakebuf_r+0x70>
 800563a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800563e:	4630      	mov	r0, r6
 8005640:	f000 f81e 	bl	8005680 <_isatty_r>
 8005644:	b128      	cbz	r0, 8005652 <__smakebuf_r+0x70>
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	f023 0303 	bic.w	r3, r3, #3
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	81a3      	strh	r3, [r4, #12]
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	431d      	orrs	r5, r3
 8005656:	81a5      	strh	r5, [r4, #12]
 8005658:	e7cf      	b.n	80055fa <__smakebuf_r+0x18>
	...

0800565c <_fstat_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4d07      	ldr	r5, [pc, #28]	; (800567c <_fstat_r+0x20>)
 8005660:	2300      	movs	r3, #0
 8005662:	4604      	mov	r4, r0
 8005664:	4608      	mov	r0, r1
 8005666:	4611      	mov	r1, r2
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	f7fe fd66 	bl	800413a <_fstat>
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	d102      	bne.n	8005678 <_fstat_r+0x1c>
 8005672:	682b      	ldr	r3, [r5, #0]
 8005674:	b103      	cbz	r3, 8005678 <_fstat_r+0x1c>
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	bd38      	pop	{r3, r4, r5, pc}
 800567a:	bf00      	nop
 800567c:	2000437c 	.word	0x2000437c

08005680 <_isatty_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4d06      	ldr	r5, [pc, #24]	; (800569c <_isatty_r+0x1c>)
 8005684:	2300      	movs	r3, #0
 8005686:	4604      	mov	r4, r0
 8005688:	4608      	mov	r0, r1
 800568a:	602b      	str	r3, [r5, #0]
 800568c:	f7fe febc 	bl	8004408 <_isatty>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d102      	bne.n	800569a <_isatty_r+0x1a>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	b103      	cbz	r3, 800569a <_isatty_r+0x1a>
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	bd38      	pop	{r3, r4, r5, pc}
 800569c:	2000437c 	.word	0x2000437c

080056a0 <_malloc_usable_size_r>:
 80056a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056a4:	1f18      	subs	r0, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bfbc      	itt	lt
 80056aa:	580b      	ldrlt	r3, [r1, r0]
 80056ac:	18c0      	addlt	r0, r0, r3
 80056ae:	4770      	bx	lr

080056b0 <_init>:
 80056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b2:	bf00      	nop
 80056b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b6:	bc08      	pop	{r3}
 80056b8:	469e      	mov	lr, r3
 80056ba:	4770      	bx	lr

080056bc <_fini>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	bf00      	nop
 80056c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c2:	bc08      	pop	{r3}
 80056c4:	469e      	mov	lr, r3
 80056c6:	4770      	bx	lr
